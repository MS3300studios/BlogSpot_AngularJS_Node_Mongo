var app=angular.module("app",[]);angular.module("app",["ngRoute"]),function(y){"use strict";var t=y.module("ngRoute",["ng"]).provider("$route",function(){function v(t,e){return y.extend(new(y.extend(function(){},{prototype:t})),e)}var m={};function r(t,e){var n=e.caseInsensitiveMatch,e={originalPath:t,regexp:t},o=e.keys=[];return t=t.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)([\?\*])?/g,function(t,e,n,r){var i="?"===r?r:null,r="*"===r?r:null;return o.push({name:n,optional:!!i}),e=e||"",(i?"":e)+"(?:"+(i?e:"")+(r?"(.+?)":"([^/]+)")+(i||"")+")"+(i||"")}).replace(/([\/$\*])/g,"\\$1"),e.regexp=new RegExp("^"+t+"$",n?"i":""),e}this.when=function(t,e){var n;return m[t]=y.extend({reloadOnSearch:!0},e,t&&r(t,e)),t&&(n="/"==t[t.length-1]?t.substr(0,t.length-1):t+"/",m[n]=y.extend({redirectTo:t},r(n,e))),this},this.otherwise=function(t){return this.when(null,t),this},this.$get=["$rootScope","$location","$routeParams","$q","$injector","$http","$templateCache","$sce",function(s,u,c,l,f,h,p,d){var $=!1,g={routes:m,reload:function(){$=!0,s.$evalAsync(t)}};return s.$on("$locationChangeSuccess",t),g;function t(){var n,r,t,i,o,a=(y.forEach(m,function(t,e){!r&&(n=function(t,e){var n=e.keys,r={};if(!e.regexp)return null;var i=e.regexp.exec(t);if(!i)return null;for(var o=1,a=i.length;o<a;++o){var s=n[o-1],u="string"==typeof i[o]?decodeURIComponent(i[o]):i[o];s&&u&&(r[s.name]=u)}return r}(u.path(),t))&&((r=v(t,{params:y.extend({},u.search(),n),pathParams:n})).$$route=t)}),r||m.null&&v(m.null,{params:{},pathParams:{}})),e=g.current;a&&e&&a.$$route===e.$$route&&y.equals(a.pathParams,e.pathParams)&&!a.reloadOnSearch&&!$?(e.params=a.params,y.copy(e.params,c),s.$broadcast("$routeUpdate",e)):(a||e)&&($=!1,s.$broadcast("$routeChangeStart",a,e),(g.current=a)&&a.redirectTo&&(y.isString(a.redirectTo)?u.path((t=a.redirectTo,i=a.params,o=[],y.forEach((t||"").split(":"),function(t,e){0===e?o.push(t):(t=(e=t.match(/(\w+)(.*)/))[1],o.push(i[t]),o.push(e[2]||""),delete i[t])}),o.join(""))).search(a.params):u.url(a.redirectTo(a.pathParams,u.path(),u.search()))).replace(),l.when(a).then(function(){if(a){var t,e,n=y.extend({},a.resolve);return y.forEach(n,function(t,e){n[e]=y.isString(t)?f.get(t):f.invoke(t)}),y.isDefined(t=a.template)?y.isFunction(t)&&(t=t(a.params)):y.isDefined(e=a.templateUrl)&&(y.isFunction(e)&&(e=e(a.params)),e=d.getTrustedResourceUrl(e),y.isDefined(e)&&(a.loadedTemplateUrl=e,t=h.get(e,{cache:p}).then(function(t){return t.data}))),y.isDefined(t)&&(n.$template=t),l.all(n)}}).then(function(t){a==g.current&&(a&&(a.locals=t,y.copy(a.params,c)),s.$broadcast("$routeChangeSuccess",a,e))},function(t){a==g.current&&s.$broadcast("$routeChangeError",a,e,t)}))}}]});function e(h,p,d){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(r,i,t,e,o){var a,s,n,u=t.autoscroll,c=t.onload||"";function l(){n&&(n.remove(),n=null),a&&(a.$destroy(),a=null),s&&(d.leave(s,function(){n=null}),n=s,s=null)}function f(){var t,e=h.current&&h.current.locals,n=e&&e.$template;y.isDefined(n)?(t=r.$new(),e=h.current,n=o(t,function(t){d.enter(t,null,s||i,function(){!y.isDefined(u)||u&&!r.$eval(u)||p()}),l()}),s=n,(a=e.scope=t).$emit("$viewContentLoaded"),a.$eval(c)):l()}r.$on("$routeChangeSuccess",f),f()}}}function n(o,a,s){return{restrict:"ECA",priority:-400,link:function(t,e){var n=s.current,r=n.locals;e.html(r.$template);var i=o(e.contents());n.controller&&(r.$scope=t,r=a(n.controller,r),n.controllerAs&&(t[n.controllerAs]=r),e.data("$ngControllerController",r),e.children().data("$ngControllerController",r)),i(t)}}}t.provider("$routeParams",function(){this.$get=function(){return{}}}),t.directive("ngView",e),t.directive("ngView",n),e.$inject=["$route","$anchorScroll","$animate"],n.$inject=["$compile","$controller","$route"]}((window,window.angular)),function($,rt,it){"use strict";function m(o){return function(){var t,e,n=arguments[0],r=arguments,i="["+(o?o+":":"")+n+"] "+arguments[1].replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1);return 2+e<r.length?"function"==typeof(e=r[2+e])?e.toString().replace(/ ?\{[\s\S]*$/,""):void 0===e?"undefined":"string"!=typeof e?_(e):e:t});for(i=i+"\nhttp://errors.angularjs.org/1.2.18/"+(o?o+"/":"")+n,t=2;t<arguments.length;t++)i=i+(2==t?"?":"&")+"p"+(t-2)+"="+encodeURIComponent("function"==typeof(e=arguments[t])?e.toString().replace(/ \{[\s\S]*$/,""):void 0===e?"undefined":"string"!=typeof e?JSON.stringify(e):e);return new Error(i)}}var w=function(t){return ct(t)?t.toLowerCase():t},x=Object.prototype.hasOwnProperty,c=function(t){return ct(t)?t.toUpperCase():t};"i"!=="I".toLowerCase()&&(w=function(t){return ct(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},c=function(t){return ct(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(-33&t.charCodeAt(0))}):t});var T,ot,d,p,O,r=[].slice,t=[].push,s=Object.prototype.toString,u=m("ng"),l=$.angular||($.angular={}),n=["0","0","0"];function M(t){if(null!=t&&!P(t)){var e=t.length;return 1===t.nodeType&&e||(ct(t)||lt(t)||0===e||"number"==typeof e&&0<e&&e-1 in t)}}function at(t,e,n){if(t)if(ft(t))for(var r in t)"prototype"==r||"length"==r||"name"==r||t.hasOwnProperty&&!t.hasOwnProperty(r)||e.call(n,t[r],r);else if(t.forEach&&t.forEach!==at)t.forEach(e,n);else if(M(t))for(r=0;r<t.length;r++)e.call(n,t[r],r);else for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r);return t}function V(t){var e,n=[];for(e in t)t.hasOwnProperty(e)&&n.push(e);return n.sort()}function g(n){return function(t,e){n(e,t)}}function i(){for(var t,e=n.length;e;){if(57==(t=n[--e].charCodeAt(0)))return n[e]="A",n.join("");if(90!=t)return n[e]=String.fromCharCode(t+1),n.join("");n[e]="0"}return n.unshift("0"),n.join("")}function f(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function st(n){var t=n.$$hashKey;return at(arguments,function(t){t!==n&&at(t,function(t,e){n[e]=t})}),f(n,t),n}function y(t){return parseInt(t,10)}function v(t,e){return st(new(st(function(){},{prototype:t})),e)}function E(){}function b(t){return t}function S(t){return function(){return t}}function k(t){return void 0===t}function I(t){return void 0!==t}function ut(t){return null!=t&&"object"==typeof t}function ct(t){return"string"==typeof t}function h(t){return"number"==typeof t}function C(t){return"[object Date]"===s.call(t)}T=y((/msie (\d+)/.exec(w(navigator.userAgent))||[])[1]),isNaN(T)&&(T=y((/trident\/.*; rv:(\d+)/.exec(w(navigator.userAgent))||[])[1])),E.$inject=[],b.$inject=[];var lt=ft(Array.isArray)?Array.isArray:function(t){return"[object Array]"===s.call(t)};function ft(t){return"function"==typeof t}function A(t){return"[object RegExp]"===s.call(t)}function P(t){return t&&t.document&&t.location&&t.alert&&t.setInterval}function j(t){return t&&t.$evalAsync&&t.$watch}var ht=String.prototype.trim?function(t){return ct(t)?t.trim():t}:function(t){return ct(t)?t.replace(/^\s\s*/,"").replace(/\s\s*$/,""):t};function o(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function N(t,e){if(t.indexOf)return t.indexOf(e);for(var n=0;n<t.length;n++)if(e===t[n])return n;return-1}function D(t,e){var n=N(t,e);return 0<=n&&t.splice(n,1),e}function R(t,n,e,r){if(P(t)||j(t))throw u("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");if(n){if(t===n)throw u("cpi","Can't copy! Source and destination are identical.");if(e=e||[],r=r||[],ut(t)){var i=N(e,t);if(-1!==i)return r[i];e.push(t),r.push(n)}var o;if(lt(t))for(var a=n.length=0;a<t.length;a++)o=R(t[a],null,e,r),ut(t[a])&&(e.push(t[a]),r.push(o)),n.push(o);else{var s,i=n.$$hashKey;for(s in at(n,function(t,e){delete n[e]}),t)o=R(t[s],null,e,r),ut(t[s])&&(e.push(t[s]),r.push(o)),n[s]=o;f(n,i)}}else(n=t)&&(lt(t)?n=R(t,[],e,r):C(t)?n=new Date(t.getTime()):A(t)?n=new RegExp(t.source):ut(t)&&(n=R(t,{},e,r)));return n}function pt(t,e){if(lt(t)){e=e||[];for(var n=0;n<t.length;n++)e[n]=t[n]}else if(ut(t))for(var r in e=e||{},t)!x.call(t,r)||"$"===r.charAt(0)&&"$"===r.charAt(1)||(e[r]=t[r]);return e||t}function dt(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!=t&&e!=e)return!0;var n,r,i,o=typeof t,a=typeof e;if(o==a&&"object"==o){if(!lt(t)){if(C(t))return C(e)&&t.getTime()==e.getTime();if(A(t)&&A(e))return t.toString()==e.toString();if(j(t)||j(e)||P(t)||P(e)||lt(e))return!1;for(r in i={},t)if("$"!==r.charAt(0)&&!ft(t[r])){if(!dt(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!i.hasOwnProperty(r)&&"$"!==r.charAt(0)&&e[r]!==it&&!ft(e[r]))return!1;return!0}if(!lt(e))return!1;if((n=t.length)==e.length){for(r=0;r<n;r++)if(!dt(t[r],e[r]))return!1;return!0}}return!1}function U(){return rt.securityPolicy&&rt.securityPolicy.isActive||rt.querySelector&&!(!rt.querySelector("[ng-csp]")&&!rt.querySelector("[data-ng-csp]"))}function q(t,e,n){return t.concat(r.call(e,n))}function $t(t,e){return r.call(t,e||0)}function F(t,e){var n=2<arguments.length?$t(arguments,2):[];return!ft(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,n.concat(r.call(arguments,0))):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function a(t,e){var n=e;return"string"==typeof t&&"$"===t.charAt(0)?n=it:P(e)?n="$WINDOW":e&&rt===e?n="$DOCUMENT":j(e)&&(n="$SCOPE"),n}function _(t,e){return void 0===t?it:JSON.stringify(t,a,e?"  ":null)}function L(t){return ct(t)?JSON.parse(t):t}function H(t){var e;return t="function"==typeof t||!(!t||0===t.length)&&!("f"==(e=w(""+t))||"0"==e||"false"==e||"no"==e||"n"==e||"[]"==e)}function gt(t){t=ot(t).clone();try{t.empty()}catch(t){}var e=ot("<div>").append(t).html();try{return 3===t[0].nodeType?w(e):e.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(t,e){return"<"+w(e)})}catch(t){return w(e)}}function B(t){try{return decodeURIComponent(t)}catch(t){}}function z(t){var e,n,r={};return at((t||"").split("&"),function(t){t&&(e=t.split("="),I(n=B(e[0]))&&(t=!I(e[1])||B(e[1]),r[n]?lt(r[n])?r[n].push(t):r[n]=[r[n],t]:r[n]=t))}),r}function W(t){var n=[];return at(t,function(t,e){lt(t)?at(t,function(t){n.push(Q(e,!0)+(!0===t?"":"="+Q(t,!0)))}):n.push(Q(e,!0)+(!0===t?"":"="+Q(t,!0)))}),n.length?n.join("&"):""}function X(t){return Q(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Q(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,e?"%20":"+")}function J(e,n){function r(){if((e=ot(e)).injector()){var t=e[0]===rt?"document":gt(e);throw u("btstrpd","App Already Bootstrapped with this Element '{0}'",t)}return(n=n||[]).unshift(["$provide",function(t){t.value("$rootElement",e)}]),n.unshift("ng"),(t=ce(n)).invoke(["$rootScope","$rootElement","$compile","$injector","$animate",function(t,e,n,r,i){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),t}var t=/^NG_DEFER_BOOTSTRAP!/;if($&&!t.test($.name))return r();$.name=$.name.replace(t,""),l.resumeBootstrap=function(t){at(t,function(t){n.push(t)}),r()}}O=T<9?function(t){return(t=t.nodeName?t:t[0]).scopeName&&"HTML"!=t.scopeName?c(t.scopeName+":"+t.nodeName):t.nodeName}:function(t){return t.nodeName||t[0].nodeName};var e=/[A-Z]/g;function vt(t,n){return n=n||"_",t.replace(e,function(t,e){return(e?n:"")+t.toLowerCase()})}function mt(t,e,n){if(!t)throw u("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function G(t,e,n){return n&&lt(t)&&(t=t[t.length-1]),mt(ft(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}function K(t,e){if("hasOwnProperty"===t)throw u("badname","hasOwnProperty is not a valid {0} name",e)}function Y(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,a=i.length,s=0;s<a;s++)r=i[s],t=t&&(o=t)[r];return!n&&ft(t)?F(o,t):t}function Z(t){var e=t[0],n=t[t.length-1];if(e===n)return ot(e);for(var r=e,i=[r];(r=r.nextSibling)&&(i.push(r),r!==n););return ot(i)}var tt={full:"1.2.18",major:1,minor:2,dot:18,codeName:"ear-extendability"};var et=Dt.cache={},nt=Dt.expando="ng"+(new Date).getTime(),yt=1,wt=$.document.addEventListener?function(t,e,n){t.addEventListener(e,n,!1)}:function(t,e,n){t.attachEvent("on"+e,n)},bt=$.document.removeEventListener?function(t,e,n){t.removeEventListener(e,n,!1)}:function(t,e,n){t.detachEvent("on"+e,n)};Dt._data=function(t){return this.cache[t[this.expando]]||{}};var xt=/([\:\-\_]+(.))/g,St=/^moz([A-Z])/,Ct=m("jqLite");function Et(t){return t.replace(xt,function(t,e,n,r){return r?n.toUpperCase():n}).replace(St,"Moz$1")}function kt(t,l,f,h){var p=d.fn[t];function e(t){var e,n,r,i,o,a,s,u=f&&t?[this.filter(t)]:[this],c=l;if(!h||null!=t)for(;u.length;)for(n=0,r=(e=u.shift()).length;n<r;n++)for(i=ot(e[n]),c?i.triggerHandler("$destroy"):c=!c,o=0,a=(s=i.children()).length;o<a;o++)u.push(d(s[o]));return p.apply(this,arguments)}p=p.$original||p,e.$original=p,d.fn[t]=e}var At=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,Tt=/<|&#?\w+;/,Ot=/<([\w:]+)/,Mt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Pt={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function jt(t){return!Tt.test(t)}function Nt(t,e){var n;return e=e||rt,(n=At.exec(t))?[e.createElement(n[1])]:function(t,e){var n,r,i,o,a=e.createDocumentFragment(),s=[];if(jt(t))s.push(e.createTextNode(t));else{for(n=a.appendChild(e.createElement("div")),e=(Ot.exec(t)||["",""])[1].toLowerCase(),e=Pt[e]||Pt._default,n.innerHTML="<div>&#160;</div>"+e[1]+t.replace(Mt,"<$1></$2>")+e[2],n.removeChild(n.firstChild),r=e[0];r--;)n=n.lastChild;for(i=0,o=n.childNodes.length;i<o;++i)s.push(n.childNodes[i]);(n=a.firstChild).textContent=""}return a.textContent="",a.innerHTML="",s}(t,e)}function Dt(t){if(t instanceof Dt)return t;if(ct(t)&&(t=ht(t)),!(this instanceof Dt)){if(ct(t)&&"<"!=t.charAt(0))throw Ct("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Dt(t)}ct(t)?(Bt(this,Nt(t)),ot(rt.createDocumentFragment()).append(this)):Bt(this,t)}function Rt(t){return t.cloneNode(!0)}function Ut(t){Vt(t);for(var e=0,n=t.childNodes||[];e<n.length;e++)Ut(n[e])}function qt(n,t,e,r){if(I(r))throw Ct("offargs","jqLite#off() does not support the `selector` argument");var i=It(n,"events");It(n,"handle")&&(k(t)?at(i,function(t,e){bt(n,e,t),delete i[e]}):at(t.split(" "),function(t){k(e)?(bt(n,t,i[t]),delete i[t]):D(i[t]||[],e)}))}function Vt(t,e){var n=t[nt],r=et[n];r&&(e?delete et[n].data[e]:(r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),qt(t)),delete et[n],t[nt]=it))}function It(t,e,n){var r=t[nt],i=et[r||-1];if(!I(n))return i&&i[e];i||(t[nt]=r=++yt,i=et[r]={}),i[e]=n}function Ft(t,e,n){var r=It(t,"data"),i=I(n),o=!i&&I(e),a=o&&!ut(e);if(r||a||It(t,"data",r={}),!i)return o?a?r&&r[e]:void st(r,e):r;r[e]=n}function _t(t,e){return!!t.getAttribute&&-1<(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")}function Lt(e,t){t&&e.setAttribute&&at(t.split(" "),function(t){e.setAttribute("class",ht((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+ht(t)+" "," ")))})}function Ht(t,e){var n;e&&t.setAttribute&&(n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),at(e.split(" "),function(t){t=ht(t),-1===n.indexOf(" "+t+" ")&&(n+=t+" ")}),t.setAttribute("class",ht(n)))}function Bt(t,e){if(e){e=e.nodeName||!I(e.length)||P(e)?[e]:e;for(var n=0;n<e.length;n++)t.push(e[n])}}function zt(t,e){return Wt(t,"$"+(e||"ngController")+"Controller")}function Wt(t,e,n){9==(t=ot(t))[0].nodeType&&(t=t.find("html"));for(var r=lt(e)?e:[e];t.length;){for(var i=t[0],o=0,a=r.length;o<a;o++)if((n=t.data(r[o]))!==it)return n;t=ot(i.parentNode||11===i.nodeType&&i.host)}}function Xt(t){for(var e=0,n=t.childNodes;e<n.length;e++)Ut(n[e]);for(;t.firstChild;)t.removeChild(t.firstChild)}Pt.optgroup=Pt.option,Pt.tbody=Pt.tfoot=Pt.colgroup=Pt.caption=Pt.thead,Pt.th=Pt.td;var Qt=Dt.prototype={ready:function(t){var e=!1;function n(){e||(e=!0,t())}"complete"===rt.readyState?setTimeout(n):(this.on("DOMContentLoaded",n),Dt($).on("load",n))},toString:function(){var e=[];return at(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(t){return ot(0<=t?this[t]:this[this.length+t])},length:0,push:t,sort:[].sort,splice:[].splice},Jt={};at("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){Jt[w(t)]=t});var Gt,Kt={};function Yt(t,e){e=Jt[e.toLowerCase()];return e&&Kt[t.nodeName]&&e}function Zt(t,e){var n=Gt[t.nodeType];if(k(e))return n?t[n]:"";t[n]=e}function te(r,i){function t(e,t){var n;e.preventDefault||(e.preventDefault=function(){e.returnValue=!1}),e.stopPropagation||(e.stopPropagation=function(){e.cancelBubble=!0}),e.target||(e.target=e.srcElement||rt),k(e.defaultPrevented)&&(n=e.preventDefault,e.preventDefault=function(){e.defaultPrevented=!0,n.call(e)},e.defaultPrevented=!1),e.isDefaultPrevented=function(){return e.defaultPrevented||!1===e.returnValue},at(pt(i[t||e.type]||[]),function(t){t.call(r,e)}),T<=8?(e.preventDefault=null,e.stopPropagation=null,e.isDefaultPrevented=null):(delete e.preventDefault,delete e.stopPropagation,delete e.isDefaultPrevented)}return t.elem=r,t}function ee(t){var e,n=typeof t;return"object"==n&&null!==t?"function"==typeof(e=t.$$hashKey)?e=t.$$hashKey():e===it&&(e=t.$$hashKey=i()):e=t,n+":"+e}function ne(t){at(t,this.put,this)}at("input,select,option,textarea,button,form,details".split(","),function(t){Kt[c(t)]=!0}),at({data:Ft,inheritedData:Wt,scope:function(t){return ot(t).data("$scope")||Wt(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return ot(t).data("$isolateScope")||ot(t).data("$isolateScopeNoTemplate")},controller:zt,injector:function(t){return Wt(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:_t,css:function(t,e,n){var r;if(e=Et(e),!I(n))return T<=8&&""===(r=t.currentStyle&&t.currentStyle[e])&&(r="auto"),r=r||t.style[e],T<=8&&(r=""===r?it:r),r;t.style[e]=n},attr:function(t,e,n){var r=w(e);if(Jt[r]){if(!I(n))return t[e]||(t.attributes.getNamedItem(e)||E).specified?r:it;n?(t[e]=!0,t.setAttribute(e,r)):(t[e]=!1,t.removeAttribute(r))}else if(I(n))t.setAttribute(e,n);else if(t.getAttribute){e=t.getAttribute(e,2);return null===e?it:e}},prop:function(t,e,n){if(!I(n))return t[e];t[e]=n},text:(Gt=[],T<9?(Gt[1]="innerText",Gt[3]="nodeValue"):Gt[1]=Gt[3]="textContent",Zt.$dv="",Zt),val:function(t,e){if(k(e)){if("SELECT"===O(t)&&t.multiple){var n=[];return at(t.options,function(t){t.selected&&n.push(t.value||t.text)}),0===n.length?null:n}return t.value}t.value=e},html:function(t,e){if(k(e))return t.innerHTML;for(var n=0,r=t.childNodes;n<r.length;n++)Ut(r[n]);t.innerHTML=e},empty:Xt},function(c,t){Dt.prototype[t]=function(t,e){var n,r,i=this.length;if(c!==Xt&&(2==c.length&&c!==_t&&c!==zt?t:e)===it){if(ut(t)){for(n=0;n<i;n++)if(c===Ft)c(this[n],t);else for(r in t)c(this[n],r,t[r]);return this}for(var o=(u=c.$dv)===it?Math.min(i,1):i,a=0;a<o;a++)var s=c(this[a],t,e),u=u?u+s:s;return u}for(n=0;n<i;n++)c(this[n],t,e);return this}}),at({removeData:Vt,dealoc:Ut,on:function e(i,t,o,n){if(I(n))throw Ct("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");var a=It(i,"events"),s=It(i,"handle");a||It(i,"events",a={}),s||It(i,"handle",s=te(i,a)),at(t.split(" "),function(n){var r,t=a[n];t||("mouseenter"==n||"mouseleave"==n?(r=rt.body.contains||rt.body.compareDocumentPosition?function(t,e){var n=9===t.nodeType?t.documentElement:t,e=e&&e.parentNode;return t===e||!(!e||1!==e.nodeType||!(n.contains?n.contains(e):t.compareDocumentPosition&&16&t.compareDocumentPosition(e)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},a[n]=[],e(i,{mouseleave:"mouseout",mouseenter:"mouseover"}[n],function(t){var e=t.relatedTarget;e&&(e===this||r(this,e))||s(t,n)})):(wt(i,n,s),a[n]=[]),t=a[n]),t.push(o)})},off:qt,one:function(e,n,r){(e=ot(e)).on(n,function t(){e.off(n,r),e.off(n,t)}),e.on(n,r)},replaceWith:function(e,t){var n,r=e.parentNode;Ut(e),at(new Dt(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(t){var e=[];return at(t.childNodes,function(t){1===t.nodeType&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(e,t){at(new Dt(t),function(t){1!==e.nodeType&&11!==e.nodeType||e.appendChild(t)})},prepend:function(e,t){var n;1===e.nodeType&&(n=e.firstChild,at(new Dt(t),function(t){e.insertBefore(t,n)}))},wrap:function(t,e){e=ot(e)[0];var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)},remove:function(t){Ut(t);var e=t.parentNode;e&&e.removeChild(t)},after:function(t,e){var n=t,r=t.parentNode;at(new Dt(e),function(t){r.insertBefore(t,n.nextSibling),n=t})},addClass:Ht,removeClass:Lt,toggleClass:function(n,t,r){t&&at(t.split(" "),function(t){var e=r;k(e)&&(e=!_t(n,t)),(e?Ht:Lt)(n,t)})},parent:function(t){t=t.parentNode;return t&&11!==t.nodeType?t:null},next:function(t){if(t.nextElementSibling)return t.nextElementSibling;for(var e=t.nextSibling;null!=e&&1!==e.nodeType;)e=e.nextSibling;return e},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:Rt,triggerHandler:function(e,t,n){t=(It(e,"events")||{})[t];n=n||[];var r=[{preventDefault:E,stopPropagation:E}];at(t,function(t){t.apply(e,r.concat(n))})}},function(o,t){Dt.prototype[t]=function(t,e,n){for(var r,i=0;i<this.length;i++)k(r)?I(r=o(this[i],t,e,n))&&(r=ot(r)):Bt(r,o(this[i],t,e,n));return I(r)?r:this},Dt.prototype.bind=Dt.prototype.on,Dt.prototype.unbind=Dt.prototype.off}),ne.prototype={put:function(t,e){this[ee(t)]=e},get:function(t){return this[ee(t)]},remove:function(t){var e=this[t=ee(t)];return delete this[t],e}};var re=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,ie=/,/,oe=/^\s*(_?)(\S+?)\1\s*$/,ae=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,se=m("$injector");function ue(t){var r,e;return"function"==typeof t?(r=t.$inject)||(r=[],t.length&&at(t.toString().replace(ae,"").match(re)[1].split(ie),function(t){t.replace(oe,function(t,e,n){r.push(n)})}),t.$inject=r):lt(t)?(G(t[e=t.length-1],"fn"),r=t.slice(0,e)):G(t,"fn",!0),r}function ce(t){var i={},o="Provider",a=[],c=new ne,s={$provide:{provider:e(r),factory:e(f),service:e(function(t,e){return f(t,["$injector",function(t){return t.instantiate(e)}])}),value:e(function(t,e){return f(t,S(e))}),constant:e(function(t,e){K(t,"constant"),s[t]=e,n[t]=e}),decorator:function(t,e){var n=l.get(t+o),r=n.$get;n.$get=function(){var t=u.invoke(r,n);return u.invoke(e,null,{$delegate:t})}}}},l=s.$injector=h(s,function(){throw se("unpr","Unknown provider: {0}",a.join(" <- "))}),n={},u=n.$injector=h(n,function(t){t=l.get(t+o);return u.invoke(t.$get,t)});return at(function r(t){var i,o,a,s,u=[];at(t,function(e){if(!c.get(e)){c.put(e,!0);try{if(ct(e))for(i=p(e),u=u.concat(r(i.requires)).concat(i._runBlocks),o=i._invokeQueue,a=0,s=o.length;a<s;a++){var t=o[a],n=l.get(t[0]);n[t[1]].apply(n,t[2])}else ft(e)||lt(e)?u.push(l.invoke(e)):G(e,"module")}catch(t){throw lt(e)&&(e=e[e.length-1]),t.message&&t.stack&&-1==t.stack.indexOf(t.message)&&(t=t.message+"\n"+t.stack),se("modulerr","Failed to instantiate module {0} due to:\n{1}",e,t.stack||t.message||t)}}});return u}(t),function(t){u.invoke(t||E)}),u;function e(n){return function(t,e){if(!ut(t))return n(t,e);at(t,g(n))}}function r(t,e){if(K(t,"service"),(ft(e)||lt(e))&&(e=l.instantiate(e)),!e.$get)throw se("pget","Provider '{0}' must define $get factory method.",t);return s[t+o]=e}function f(t,e){return r(t,{$get:e})}function h(n,t){function u(e){if(n.hasOwnProperty(e)){if(n[e]===i)throw se("cdep","Circular dependency found: {0}",e+" <- "+a.join(" <- "));return n[e]}try{return a.unshift(e),n[e]=i,n[e]=t(e)}catch(t){throw n[e]===i&&delete n[e],t}finally{a.shift()}}function r(t,e,n){for(var r,i=[],o=ue(t),a=0,s=o.length;a<s;a++){if("string"!=typeof(r=o[a]))throw se("itkn","Incorrect injection token! Expected service name as string, got {0}",r);i.push(n&&n.hasOwnProperty(r)?n[r]:u(r))}return t.$inject||(t=t[s]),t.apply(e,i)}return{invoke:r,instantiate:function(t,e){var n=function(){};return n.prototype=(lt(t)?t[t.length-1]:t).prototype,ut(e=r(t,n=new n,e))||ft(e)?e:n},get:u,annotate:ue,has:function(t){return s.hasOwnProperty(t+o)||n.hasOwnProperty(t)}}}}function le(){var n=!0;this.disableAutoScrolling=function(){n=!1},this.$get=["$window","$location","$rootScope",function(i,o,t){var a=i.document;function e(){var t,e,n,r=o.hash();r?(t=a.getElementById(r))?t.scrollIntoView():(e=a.getElementsByName(r),n=null,at(e,function(t){n||"a"!==w(t.nodeName)||(n=t)}),(t=n)?t.scrollIntoView():"top"===r&&i.scrollTo(0,0)):i.scrollTo(0,0)}return n&&t.$watch(function(){return o.hash()},function(){t.$evalAsync(e)}),e}]}var fe=m("$animate"),he=["$provide",function(r){this.$$selectors={},this.register=function(t,e){var n=t+"-animation";if(t&&"."!=t.charAt(0))throw fe("notcsel","Expecting class selector starting with '.' got '{0}'.",t);this.$$selectors[t.substr(1)]=n,r.factory(n,e)},this.classNameFilter=function(t){return 1===arguments.length&&(this.$$classNameFilter=t instanceof RegExp?t:null),this.$$classNameFilter},this.$get=["$timeout","$$asyncCallback",function(t,e){function i(t){t&&e(t)}return{enter:function(t,e,n,r){n?n.after(t):(e&&e[0]||(e=n.parent()),e.append(t)),i(r)},leave:function(t,e){t.remove(),i(e)},move:function(t,e,n,r){this.enter(t,e,n,r)},addClass:function(t,e,n){e=ct(e)?e:lt(e)?e.join(" "):"",at(t,function(t){Ht(t,e)}),i(n)},removeClass:function(t,e,n){e=ct(e)?e:lt(e)?e.join(" "):"",at(t,function(t){Lt(t,e)}),i(n)},setClass:function(t,e,n,r){at(t,function(t){Ht(t,e),Lt(t,n)}),i(r)},enabled:E}}]}];function pe(){this.$get=["$$rAF","$timeout",function(e,n){return e.supported?function(t){return e(t)}:function(t){return n(t,0,!1)}}]}function de(n,t,s,r){var i=this,u=t[0],o=n.location,a=n.history,c=n.setTimeout,e=n.clearTimeout,l={};i.isMock=!1;var f=0,h=[];function p(t){try{t.apply(null,$t(arguments,1))}finally{if(0===--f)for(;h.length;)try{h.pop()()}catch(t){s.error(t)}}}i.$$completeOutstandingRequest=p,i.$$incOutstandingRequestCount=function(){f++},i.notifyWhenNoOutstandingRequests=function(t){at($,function(t){t()}),0===f?t():h.push(t)};var d,$=[];i.addPollFn=function(t){var e,n;return k(d)&&(e=100,n=c,function t(){at($,function(t){t()}),d=n(t,e)}()),$.push(t),t};var g=o.href,v=t.find("base"),m=null;i.url=function(t,e){return o!==n.location&&(o=n.location),a!==n.history&&(a=n.history),t?g!=t?(g=t,r.history?e?a.replaceState(null,"",t):(a.pushState(null,"",t),v.attr("href",v.attr("href"))):(m=t,e?o.replace(t):o.href=t),i):void 0:m||o.href.replace(/%27/g,"'")};var y=[],w=!1;function b(){m=null,g!=i.url()&&(g=i.url(),at(y,function(t){t(i.url())}))}i.onUrlChange=function(t){return w||(r.history&&ot(n).on("popstate",b),r.hashchange?ot(n).on("hashchange",b):i.addPollFn(b),w=!0),y.push(t),t},i.baseHref=function(){var t=v.attr("href");return t?t.replace(/^(https?\:)?\/\/[^\/]*/,""):""};var x={},S="",C=i.baseHref();i.cookies=function(t,e){var n,r,i,o,a;if(!t){if(u.cookie!==S)for(r=(S=u.cookie).split("; "),x={},o=0;o<r.length;o++)0<(a=(i=r[o]).indexOf("="))&&(t=unescape(i.substring(0,a)),x[t]===it&&(x[t]=unescape(i.substring(a+1))));return x}e===it?u.cookie=escape(t)+"=;path="+C+";expires=Thu, 01 Jan 1970 00:00:00 GMT":ct(e)&&4096<(n=(u.cookie=escape(t)+"="+escape(e)+";path="+C).length+1)&&s.warn("Cookie '"+t+"' possibly not set or overflowed because it was too large ("+n+" > 4096 bytes)!")},i.defer=function(t,e){var n;return f++,n=c(function(){delete l[n],p(t)},e||0),l[n]=!0,n},i.defer.cancel=function(t){return!!l[t]&&(delete l[t],e(t),p(E),!0)}}function $e(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new de(t,r,e,n)}]}function ge(){this.$get=function(){var f={};function t(t,e){if(t in f)throw m("$cacheFactory")("iid","CacheId '{0}' is already taken!",t);var n=0,r=st({},e,{id:t}),i={},o=e&&e.capacity||Number.MAX_VALUE,a={},s=null,u=null;return f[t]={put:function(t,e){if(o<Number.MAX_VALUE&&c(a[t]||(a[t]={key:t})),!k(e))return t in i||n++,i[t]=e,o<n&&this.remove(u.key),e},get:function(t){if(o<Number.MAX_VALUE){var e=a[t];if(!e)return;c(e)}return i[t]},remove:function(t){if(o<Number.MAX_VALUE){var e=a[t];if(!e)return;e==s&&(s=e.p),e==u&&(u=e.n),l(e.n,e.p),delete a[t]}delete i[t],n--},removeAll:function(){i={},n=0,a={},s=u=null},destroy:function(){a=r=i=null,delete f[t]},info:function(){return st({},r,{size:n})}};function c(t){t!=s&&(u?u==t&&(u=t.n):u=t,l(t.n,t.p),l(t,s),(s=t).n=null)}function l(t,e){t!=e&&(t&&(t.p=e),e&&(e.n=t))}}return t.info=function(){var n={};return at(f,function(t,e){n[e]=t.info()}),n},t.get=function(t){return f[t]},t}}function ve(){this.$get=["$cacheFactory",function(t){return t("templates")}]}var me=m("$compile");function ye(n,e){var p={},d="Directive",E=/^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/,k=/(([\d\w_\-]+)(?:\:([^;]+))?;?)/,A=/^(on[a-z]+|formaction)$/;this.directive=function t(a,e){return K(a,"directive"),ct(a)?(mt(e,"directiveFactory"),p.hasOwnProperty(a)||(p[a]=[],n.factory(a+d,["$injector","$exceptionHandler",function(r,i){var o=[];return at(p[a],function(t,e){try{var n=r.invoke(t);ft(n)?n={compile:S(n)}:!n.compile&&n.link&&(n.compile=S(n.link)),n.priority=n.priority||0,n.index=e,n.name=n.name||a,n.require=n.require||n.controller&&n.name,n.restrict=n.restrict||"A",o.push(n)}catch(t){i(t)}}),o}])),p[a].push(e)):at(a,g(t)),this},this.aHrefSanitizationWhitelist=function(t){return I(t)?(e.aHrefSanitizationWhitelist(t),this):e.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return I(t)?(e.imgSrcSanitizationWhitelist(t),this):e.imgSrcSanitizationWhitelist()},this.$get=["$injector","$interpolate","$exceptionHandler","$http","$templateCache","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(h,R,U,q,V,I,F,o,t,_,r,a){var L=function(t,e){this.$$element=t,this.$attr=e||{}};L.prototype={$normalize:be,$addClass:function(t){t&&0<t.length&&r.addClass(this.$$element,t)},$removeClass:function(t){t&&0<t.length&&r.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=xe(t,e),t=xe(e,t);0===n.length?r.removeClass(this.$$element,t):0===t.length?r.addClass(this.$$element,n):r.setClass(this.$$element,n,t)},$set:function(t,e,n,r){var i=Yt(this.$$element[0],t);i&&(this.$$element.prop(t,e),r=i),this[t]=e,r?this.$attr[t]=r:(r=this.$attr[t])||(this.$attr[t]=r=vt(t,"-")),("A"===(i=O(this.$$element))&&"href"===t||"IMG"===i&&"src"===t)&&(this[t]=e=a(e,"src"===t)),!1!==n&&(null===e||e===it?this.$$element.removeAttr(r):this.$$element.attr(r,e));r=this.$$observers;r&&at(r[t],function(t){try{t(e)}catch(t){U(t)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers={}),i=r[t]||(r[t]=[]);return i.push(e),o.$evalAsync(function(){i.$$inter||e(n[t])}),e}};var e=R.startSymbol(),n=R.endSymbol(),H="{{"==e||"}}"==n?b:function(t){return t.replace(/\{\{/g,e).replace(/}}/g,n)},x=/^ngAttr[A-Z]/;return B;function B(u,t,e,n,r){u instanceof ot||(u=ot(u)),at(u,function(t,e){3==t.nodeType&&t.nodeValue.match(/\S+/)&&(u[e]=t=ot(t).wrap("<span></span>").parent()[0])});var c=W(u,t,u,e,n,r);return z(u,"ng-scope"),function(t,e,n,r){mt(t,"scope");var i=e?Qt.clone.call(u):u;at(n,function(t,e){i.data("$"+e+"Controller",t)});for(var o=0,a=i.length;o<a;o++){var s=i[o].nodeType;1!==s&&9!==s||i.eq(o).data("$scope",t)}return e&&e(i,t),c&&c(t,i,i,r),i}}function z(t,e){try{t.addClass(e)}catch(t){}}function W(t,d,e,n,r,i){for(var o,a,s,u,$=[],c=0;c<t.length;c++)s=new L,(o=(o=Q(t[c],[],s,0===c?n:it,r)).length?K(o,t[c],s,d,e,null,[],[],i):null)&&o.scope&&z(ot(t[c]),"ng-scope"),s=o&&o.terminal||!(a=t[c].childNodes)||!a.length?null:W(a,o?(o.transcludeOnThisElement||!o.templateOnThisElement)&&o.transclude:d),$.push(o,s),u=u||o||s,i=null;return u?function(t,e,n,r){var i,o,a,s,u,c,l,f,h=e.length,p=new Array(h);for(u=0;u<h;u++)p[u]=e[u];for(l=u=0,c=$.length;u<c;l++)a=p[l],i=$[u++],o=$[u++],f=ot(a),i?(i.scope?(s=t.$new(),f.data("$scope",s)):s=t,f=i.transcludeOnThisElement?X(t,i.transclude,r):!i.templateOnThisElement&&r?r:!r&&d?X(t,d):null,i(o,s,a,n,f)):o&&o(t,a.childNodes,it,r)}:null}function X(i,o,a){return function(t,e,n){var r=!1;t||(r=(t=i.$new()).$$transcluded=!0);n=o(t,e,n,a);return r&&n.on("$destroy",function(){t.$destroy()}),n}}function Q(t,e,n,r,i){var o,a,s,u,c,l=t.nodeType,f=n.$attr;switch(l){case 1:S(e,be(O(t).toLowerCase()),"E",r,i);for(var h,p,d,$=t.attributes,g=0,v=$&&$.length;g<v;g++){var m,y=!1,w=!1,b=$[g];(!T||8<=T||b.specified)&&(d=be(h=b.name),x.test(d)&&(h=vt(d.substr(6),"-")),m=d.replace(/(Start|End)$/,""),d===m+"Start"&&(w=(y=h).substr(0,h.length-5)+"end",h=h.substr(0,h.length-6)),f[p=be(h.toLowerCase())]=h,n[p]=b=ht(b.value),Yt(t,p)&&(n[p]=!0),function(i,t,e,o){var a=R(e,!0);if(!a)return;if("multiple"===o&&"SELECT"===O(i))throw me("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",gt(i));t.push({priority:100,compile:function(){return{pre:function(t,e,n){var r=n.$$observers||(n.$$observers={});if(A.test(o))throw me("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");(a=R(n[o],!0,function(t,e){if("srcdoc"==e)return _.HTML;t=O(t);if("xlinkHref"==e||"FORM"==t&&"action"==e||"IMG"!=t&&("src"==e||"ngSrc"==e))return _.RESOURCE_URL}(i,o)))&&(n[o]=a(t),(r[o]||(r[o]=[])).$$inter=!0,(n.$$observers&&n.$$observers[o].$$scope||t).$watch(a,function(t,e){"class"===o&&t!=e?n.$updateClass(t,e):n.$set(o,t)}))}}}})}(t,e,b,p),S(e,p,"A",r,i,y,w))}if(ct(a=t.className)&&""!==a)for(;o=k.exec(a);)S(e,p=be(o[2]),"C",r,i)&&(n[p]=ht(o[3])),a=a.substr(o.index+o[0].length);break;case 3:s=e,u=t.nodeValue,(c=R(u,!0))&&s.push({priority:0,compile:function(t){var i=t.parent().length;return i&&z(t.parent(),"ng-binding"),function(t,e){var n=e.parent(),r=n.data("$binding")||[];r.push(c),n.data("$binding",r),i||z(n,"ng-binding"),t.$watch(c,function(t){e[0].nodeValue=t})}}});break;case 8:try{(o=E.exec(t.nodeValue))&&S(e,p=be(o[1]),"M",r,i)&&(n[p]=ht(o[2]))}catch(t){}}return e.sort(C),e}function J(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e)){do{if(!t)throw me("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n)}while(1==t.nodeType&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling,0<i)}else r.push(t);return ot(r)}function G(o,a,s){return function(t,e,n,r,i){return e=J(e[0],a,s),o(t,e,n,r,i)}}function K(t,g,v,e,n,r,m,y,i){i=i||{};for(var o,a,s,u,c,l=-Number.MAX_VALUE,w=i.controllerDirectives,b=i.newIsolateScopeDirective,x=i.templateDirective,f=i.nonTlbTranscludeDirective,h=!1,p=!1,S=i.hasElementTranscludeDirective,d=v.$$element=ot(g),$=r,C=e,E=0,k=t.length;E<k;E++){var A=(a=t[E]).$$start,T=a.$$end;if(A&&(d=J(g,A,T)),P=it,l>a.priority)break;if((c=a.scope)&&(o=o||a,a.templateUrl||(tt("new/isolated scope",b,a,d),ut(c)&&(b=a))),s=a.name,!a.templateUrl&&a.controller&&(c=a.controller,tt("'"+s+"' controller",(w=w||{})[s],a,d),w[s]=a),(c=a.transclude)&&(h=!0,a.$$tlb||(tt("transclusion",f,a,d),f=a),C="element"==c?(S=!0,l=a.priority,P=J(g,A,T),d=v.$$element=ot(rt.createComment(" "+s+": "+v[s]+" ")),g=d[0],et(n,ot($t(P)),g),B(P,e,l,$&&$.name,{nonTlbTranscludeDirective:f})):(P=ot(Rt(g)).contents(),d.empty(),B(P,e))),a.template)if(p=!0,tt("template",x,a,d),c=ft((x=a).template)?a.template(d,v):a.template,c=H(c),a.replace){if($=a,P=jt(c)?[]:ot(ht(c)),g=P[0],1!=P.length||1!==g.nodeType)throw me("tplrt","Template for directive '{0}' must have exactly one root element. {1}",s,"");et(n,d,g);var O={$attr:{}},M=Q(g,[],O),P=t.splice(E+1,t.length-(E+1));b&&Y(M),t=t.concat(M).concat(P),Z(v,O),k=t.length}else d.html(c);if(a.templateUrl)p=!0,tt("template",x,a,d),(x=a).replace&&($=a),D=function(l,f,h,p,d,$,g,v){var m,y,w=[],b=f[0],x=l.shift(),S=st({},x,{templateUrl:null,transclude:null,replace:null,$$originalDirective:x}),C=ft(x.templateUrl)?x.templateUrl(f,h):x.templateUrl;return f.empty(),q.get(_.getTrustedResourceUrl(C),{cache:V}).success(function(t){var n,e;if(t=H(t),x.replace){if(r=jt(t)?[]:ot(ht(t)),n=r[0],1!=r.length||1!==n.nodeType)throw me("tplrt","Template for directive '{0}' must have exactly one root element. {1}",x.name,C);e={$attr:{}},et(p,f,n);var r=Q(n,[],e);ut(x.scope)&&Y(r),l=r.concat(l),Z(h,e)}else n=b,f.html(t);for(l.unshift(S),m=K(l,n,h,d,f,x,$,g,v),at(p,function(t,e){t==n&&(p[e]=f[0])}),y=W(f[0].childNodes,d);w.length;){var i,o=w.shift(),a=w.shift(),s=w.shift(),u=w.shift(),c=f[0];a!==b&&(i=a.className,v.hasElementTranscludeDirective&&x.replace||(c=Rt(n)),et(s,ot(a),c),z(ot(c),i)),u=m.transcludeOnThisElement?X(o,m.transclude,u):u,m(y,o,c,p,u)}w=null}).error(function(t,e,n,r){throw me("tpload","Failed to load template: {0}",r.url)}),function(t,e,n,r,i){var o=i;w?(w.push(e),w.push(n),w.push(r),w.push(o)):(m.transcludeOnThisElement&&(o=X(e,m.transclude,i)),m(y,e,n,r,o))}}(t.splice(E,t.length-E),d,v,n,h&&C,m,y,{controllerDirectives:w,newIsolateScopeDirective:b,templateDirective:x,nonTlbTranscludeDirective:f}),k=t.length;else if(a.compile)try{ft(u=a.compile(d,v,C))?j(null,u,A,T):u&&j(u.pre,u.post,A,T)}catch(t){U(t,gt(d))}a.terminal&&(D.terminal=!0,l=Math.max(l,a.priority))}return D.scope=o&&!0===o.scope,D.transcludeOnThisElement=h,D.templateOnThisElement=p,D.transclude=C,i.hasElementTranscludeDirective=S,D;function j(t,e,n,r){t&&(n&&(t=G(t,n,r)),t.require=a.require,t.directiveName=s,b!==a&&!a.$$isolateScope||(t=nt(t,{isolateScope:!0})),m.push(t)),e&&(n&&(e=G(e,n,r)),e.require=a.require,e.directiveName=s,b!==a&&!a.$$isolateScope||(e=nt(e,{isolateScope:!0})),y.push(e))}function N(e,t,n,r){var i,o="data",a=!1;if(ct(t)){for(;"^"==(i=t.charAt(0))||"?"==i;)t=t.substr(1),"^"==i&&(o="inheritedData"),a=a||"?"==i;if(i=null,r&&"data"===o&&(i=r[t]),!(i=i||n[o]("$"+t+"Controller"))&&!a)throw me("ctreq","Controller '{0}', required by directive '{1}', can't be found!",t,e);return i}return lt(t)&&(i=[],at(t,function(t){i.push(N(e,t,n,r))})),i}function D(t,c,e,n,r){var i,o,a,s,u,l,f,h={},p=g===e?v:pt(v,new L(ot(e),v.$attr)),d=p.$$element;for(b&&(l=/^\s*([@=&])(\??)\s*(\w*)\s*$/,$=ot(e),f=c.$new(!0),!x||x!==b&&x!==b.$$originalDirective?$.data("$isolateScopeNoTemplate",f):$.data("$isolateScope",f),z($,"ng-isolate-scope"),at(b.scope,function(t,e){var n,r,i,o,a=t.match(l)||[],s=a[3]||e,u="?"==a[2],a=a[1];switch(f.$$isolateBindings[e]=a+s,a){case"@":p.$observe(s,function(t){f[e]=t}),p.$$observers[s].$$scope=c,p[s]&&(f[e]=R(p[s])(c));break;case"=":if(u&&!p[s])return;r=I(p[s]),o=r.literal?dt:function(t,e){return t===e},i=r.assign||function(){throw n=f[e]=r(c),me("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",p[s],b.name)},n=f[e]=r(c),f.$watch(function(){var t=r(c);return o(t,f[e])||(o(t,n)?i(c,t=f[e]):f[e]=t),n=t},null,r.literal);break;case"&":r=I(p[s]),f[e]=function(t){return r(c,t)};break;default:throw me("iscp","Invalid isolate scope definition for directive '{0}'. Definition: {... {1}: '{2}' ...}",b.name,e,t)}})),u=r&&function(t,e){var n;arguments.length<2&&(e=t,t=it);S&&(n=h);return r(t,e,n)},w&&at(w,function(t){var e,n={$scope:t===b||t.$$isolateScope?f:c,$element:d,$attrs:p,$transclude:u};"@"==(s=t.controller)&&(s=p[t.name]),e=F(s,n),h[t.name]=e,S||d.data("$"+t.name+"Controller",e),t.controllerAs&&(n.$scope[t.controllerAs]=e)}),i=0,o=m.length;i<o;i++)try{(a=m[i])(a.isolateScope?f:c,d,p,a.require&&N(a.directiveName,a.require,d,h),u)}catch(t){U(t,gt(d))}var $=c;for(b&&(b.template||null===b.templateUrl)&&($=f),t&&t($,e.childNodes,it,r),i=y.length-1;0<=i;i--)try{(a=y[i])(a.isolateScope?f:c,d,p,a.require&&N(a.directiveName,a.require,d,h),u)}catch(t){U(t,gt(d))}}}function Y(t){for(var e=0,n=t.length;e<n;e++)t[e]=v(t[e],{$$isolateScope:!0})}function S(t,e,n,r,i,o,a){if(e!==i){var s=null;if(p.hasOwnProperty(e))for(var u,c=h.get(e+d),l=0,f=c.length;l<f;l++)try{u=c[l],(r===it||r>u.priority)&&-1!=u.restrict.indexOf(n)&&(o&&(u=v(u,{$$start:o,$$end:a})),t.push(u),s=u)}catch(t){U(t)}return s}}function Z(n,r){var i=r.$attr,o=n.$attr,a=n.$$element;at(n,function(t,e){"$"!=e.charAt(0)&&(r[e]&&r[e]!==t&&(t+=("style"===e?";":" ")+r[e]),n.$set(e,t,!0,i[e]))}),at(r,function(t,e){"class"==e?(z(a,t),n.class=(n.class?n.class+" ":"")+t):"style"==e?(a.attr("style",a.attr("style")+";"+t),n.style=(n.style?n.style+";":"")+t):"$"==e.charAt(0)||n.hasOwnProperty(e)||(n[e]=t,o[e]=i[e])})}function C(t,e){var n=e.priority-t.priority;return 0!=n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function tt(t,e,n,r){if(e)throw me("multidir","Multiple directives [{0}, {1}] asking for {2} on: {3}",e.name,n.name,t,gt(r))}function et(t,e,n){var r,i,o=e[0],a=e.length,s=o.parentNode;if(t)for(r=0,i=t.length;r<i;r++)if(t[r]==o){t[r++]=n;for(var u=r,c=u+a-1,l=t.length;u<l;u++,c++)c<l?t[u]=t[c]:delete t[u];t.length-=a-1;break}s&&s.replaceChild(n,o);var f=rt.createDocumentFragment();f.appendChild(o),n[ot.expando]=o[ot.expando];for(var h=1,p=e.length;h<p;h++){var d=e[h];ot(d).remove(),f.appendChild(d),delete e[h]}e[0]=n,e.length=1}function nt(t,e){return st(function(){return t.apply(null,arguments)},t,e)}}]}var we=/^(x[\:\-_]|data[\:\-_])/i;function be(t){return Et(t.replace(we,""))}function xe(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue t;n+=(0<n.length?" ":"")+a}return n}function Se(){var s={},u=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(t,e){K(t,"controller"),ut(t)?st(s,t):s[t]=e},this.$get=["$injector","$window",function(o,a){return function(t,e){var n,r,i;if(ct(t)&&(r=(n=t.match(u))[1],i=n[3],G(t=s.hasOwnProperty(r)?s[r]:Y(e.$scope,r,!0)||Y(a,r,!0),r,!0)),n=o.instantiate(t,e),i){if(!e||"object"!=typeof e.$scope)throw m("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",r||t.name,i);e.$scope[i]=n}return n}}]}function Ce(){this.$get=["$window",function(t){return ot(t.document)}]}function Ee(){this.$get=["$log",function(n){return function(t,e){n.error.apply(n,arguments)}}]}function ke(t){var e,n,r={};return t&&at(t.split("\n"),function(t){n=t.indexOf(":"),e=w(ht(t.substr(0,n))),n=ht(t.substr(n+1)),e&&(r[e]?r[e]+=", "+n:r[e]=n)}),r}function Ae(e){var n=ut(e)?e:it;return function(t){return n=n||ke(e),t?n[w(t)]||null:n}}function Te(e,n,t){return ft(t)?t(e,n):(at(t,function(t){e=t(e,n)}),e)}function Oe(t){return 200<=t&&t<300}function Me(){var e=/^\s*(\[|\{[^\{])/,n=/[\}\]]\s*$/,r=/^\)\]\}',?\n/,t={"Content-Type":"application/json;charset=utf-8"},g=this.defaults={transformResponse:[function(t){return ct(t)&&(t=t.replace(r,""),e.test(t)&&n.test(t)&&(t=L(t))),t}],transformRequest:[function(t){return ut(t)&&(e=t,"[object File]"!==s.call(e))&&(e=t,"[object Blob]"!==s.call(e))?_(t):t;var e}],headers:{common:{Accept:"application/json, text/plain, */*"},post:pt(t),put:pt(t),patch:pt(t)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},i=this.interceptors=[],o=this.responseInterceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(l,f,t,h,p,r){var d=t("$http"),u=[];function $(t){var n={method:"get",transformRequest:g.transformRequest,transformResponse:g.transformResponse},r=function(t){var e,n,r,i=g.headers,o=st({},t.headers);a(i=st({},i.common,i[w(t.method)])),a(o);t:for(e in i){for(r in n=w(e),o)if(w(r)===n)continue t;o[e]=i[e]}return o;function a(n){var r;at(n,function(t,e){ft(t)&&(null!=(r=t())?n[e]=r:delete n[e])})}}(t);st(n,t),n.headers=r,n.method=c(n.method);var e=[function(t){r=t.headers;var e=Te(t.data,Ae(r),t.transformRequest);return k(t.data)&&at(r,function(t,e){"content-type"===w(e)&&delete r[e]}),k(t.withCredentials)&&!k(g.withCredentials)&&(t.withCredentials=g.withCredentials),function(i,t,e){var o,a=p.defer(),n=a.promise,s=function(t,e){if(!e)return t;var n=[];(function(t,e,n){for(var r=V(t),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i])})(e,function(t,e){null===t||k(t)||(lt(t)||(t=[t]),at(t,function(t){ut(t)&&(t=_(t)),n.push(Q(e)+"="+Q(t))}))}),0<n.length&&(t+=(-1==t.indexOf("?")?"?":"&")+n.join("&"));return t}(i.url,i.params);$.pendingRequests.push(i),n.then(c,c),(i.cache||g.cache)&&!1!==i.cache&&"GET"==i.method&&(o=ut(i.cache)?i.cache:ut(g.cache)?g.cache:d);if(o)if(I(r=o.get(s))){if(r.then)return r.then(c,c),r;lt(r)?u(r[1],r[0],pt(r[2]),r[3]):u(r,200,{},"OK")}else o.put(s,n);{var r;k(r)&&((r=Tn(i.url)?f.cookies()[i.xsrfCookieName||g.xsrfCookieName]:it)&&(e[i.xsrfHeaderName||g.xsrfHeaderName]=r),l(i.method,s,t,function(t,e,n,r){o&&(Oe(t)?o.put(s,[t,e,ke(n),r]):o.remove(s));u(e,t,n,r),h.$$phase||h.$apply()},e,i.timeout,i.withCredentials,i.responseType))}return n;function u(t,e,n,r){(Oe(e=Math.max(e,0))?a.resolve:a.reject)({data:t,status:e,headers:Ae(n),config:i,statusText:r})}function c(){var t=N($.pendingRequests,i);-1!==t&&$.pendingRequests.splice(t,1)}}(t,e,r).then(s,s)},it],i=p.when(n);for(at(u,function(t){(t.request||t.requestError)&&e.unshift(t.request,t.requestError),(t.response||t.responseError)&&e.push(t.response,t.responseError)});e.length;)var o=e.shift(),a=e.shift(),i=i.then(o,a);return i.success=function(e){return i.then(function(t){e(t.data,t.status,t.headers,n)}),i},i.error=function(e){return i.then(null,function(t){e(t.data,t.status,t.headers,n)}),i},i;function s(t){var e=st({},t,{data:Te(t.data,t.headers,n.transformResponse)});return Oe(t.status)?e:p.reject(e)}}return at(i,function(t){u.unshift(ct(t)?r.get(t):r.invoke(t))}),at(o,function(t,e){var n=ct(t)?r.get(t):r.invoke(t);u.splice(e,0,{response:function(t){return n(p.when(t))},responseError:function(t){return n(p.reject(t))}})}),$.pendingRequests=[],function(){at(arguments,function(n){$[n]=function(t,e){return $(st(e||{},{method:n,url:t}))}})}("get","delete","head","jsonp"),function(){at(arguments,function(r){$[r]=function(t,e,n){return $(st(n||{},{method:r,url:t,data:e}))}})}("post","put"),$.defaults=g,$}]}function Pe(t){if(T<=8&&(!t.match(/^(get|post|head|put|delete|options)$/i)||!$.XMLHttpRequest))return new $.ActiveXObject("Microsoft.XMLHTTP");if($.XMLHttpRequest)return new $.XMLHttpRequest;throw m("$httpBackend")("noxhr","This browser does not support XMLHttpRequest.")}function je(){this.$get=["$browser","$window","$document",function(t,e,n){return g=Pe,v=($=t).defer,m=e.angular.callbacks,y=n[0],function(t,o,e,n,r,i,a,s){var u,c;if($.$$incOutstandingRequestCount(),o=o||$.url(),"jsonp"==w(t)){var l="_"+(m.counter++).toString(36);m[l]=function(t){m[l].data=t,m[l].called=!0};var f=function(t,r,i){var o=y.createElement("script"),a=null;o.type="text/javascript",o.src=t,o.async=!0,a=function(t){bt(o,"load",a),bt(o,"error",a),y.body.removeChild(o),o=null;var e=-1,n="unknown";t&&("load"!==t.type||m[r].called||(t={type:"error"}),n=t.type,e="error"===t.type?404:200),i&&i(e,n)},wt(o,"load",a),wt(o,"error",a),T<=8&&(o.onreadystatechange=function(){ct(o.readyState)&&/loaded|complete/.test(o.readyState)&&(o.onreadystatechange=null,a({type:"load"}))});return y.body.appendChild(o),a}(o.replace("JSON_CALLBACK","angular.callbacks."+l),l,function(t,e){d(n,t,m[l].data,"",e),m[l]=E})}else{var h=g(t);if(h.open(t,o,!0),at(r,function(t,e){I(t)&&h.setRequestHeader(e,t)}),h.onreadystatechange=function(){var t,e;h&&4==h.readyState&&(e=t=null,-1!==u&&(t=h.getAllResponseHeaders(),e="response"in h?h.response:h.responseText),d(n,u||h.status,e,t,h.statusText||""))},a&&(h.withCredentials=!0),s)try{h.responseType=s}catch(t){if("json"!==s)throw t}h.send(e||null)}function p(){u=-1,f&&f(),h&&h.abort()}function d(t,e,n,r,i){c&&v.cancel(c),f=h=null,0===e&&(e=n?200:"file"==An(o).protocol?404:0),t(e=1223===e?204:e,n,r,i=i||""),$.$$completeOutstandingRequest(E)}0<i?c=v(p,i):i&&i.then&&i.then(p)};var $,g,v,m,y}]}var Ne=m("$interpolate");function De(){var g="{{",v="}}";this.startSymbol=function(t){return t?(g=t,this):g},this.endSymbol=function(t){return t?(v=t,this):v},this.$get=["$parse","$exceptionHandler","$sce",function(f,h,p){var d=g.length,$=v.length;function t(o,t,a){for(var e,n,r,i=0,s=[],u=o.length,c=!1,l=[];i<u;)-1!=(r=o.indexOf(g,i))&&-1!=(e=o.indexOf(v,r+d))?(i!=r&&s.push(o.substring(i,r)),s.push(n=f(r=o.substring(r+d,e))),n.exp=r,i=e+$,c=!0):(i!=u&&s.push(o.substring(i)),i=u);if((u=s.length)||(s.push(""),u=1),a&&1<s.length)throw Ne("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",o);if(!t||c)return l.length=u,(n=function(t){try{for(var e,n=0,r=u;n<r;n++){if("function"==typeof(e=s[n]))if(e=e(t),null==(e=a?p.getTrusted(a,e):p.valueOf(e)))e="";else switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=_(e)}l[n]=e}return l.join("")}catch(t){var i=Ne("interr","Can't interpolate: {0}\n{1}",o,t.toString());h(i)}}).exp=o,n.parts=s,n}return t.startSymbol=function(){return g},t.endSymbol=function(){return v},t}]}function Re(){this.$get=["$rootScope","$window","$q",function(l,f,h){var p={};function t(t,e,n,r){var i=f.setInterval,o=f.clearInterval,a=h.defer(),s=a.promise,u=0,c=I(r)&&!r;return n=I(n)?n:0,s.then(null,null,t),s.$$intervalId=i(function(){a.notify(u++),0<n&&n<=u&&(a.resolve(u),o(s.$$intervalId),delete p[s.$$intervalId]),c||l.$apply()},e),p[s.$$intervalId]=a,s}return t.cancel=function(t){return!!(t&&t.$$intervalId in p)&&(p[t.$$intervalId].reject("canceled"),clearInterval(t.$$intervalId),delete p[t.$$intervalId],!0)},t}]}function Ue(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"¤",posSuf:"",negPre:"(¤",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),SHORTMONTH:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),DAY:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),SHORTDAY:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a",short:"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(t){return 1===t?"one":"other"}}}}var qe=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Ve={http:80,https:443,ftp:21},Ie=m("$location");function Fe(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=X(e[n]);return e.join("/")}function _e(t,e,n){n=An(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=y(n.port)||Ve[n.protocol]||null}function Le(t,e,n){var r="/"!==t.charAt(0);r&&(t="/"+t);n=An(t);e.$$path=decodeURIComponent(r&&"/"===n.pathname.charAt(0)?n.pathname.substring(1):n.pathname),e.$$search=z(n.search),e.$$hash=decodeURIComponent(n.hash),e.$$path&&"/"!=e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function He(t,e){if(0===e.indexOf(t))return e.substr(t.length)}function Be(t){var e=t.indexOf("#");return-1==e?t:t.substr(0,e)}function ze(t){return t.substr(0,Be(t).lastIndexOf("/")+1)}function We(r,i){this.$$html5=!0,i=i||"";var o=ze(r);_e(r,this,r),this.$$parse=function(t){var e=He(o,t);if(!ct(e))throw Ie("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,o);Le(e,this,r),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=W(this.$$search),e=this.$$hash?"#"+X(this.$$hash):"";this.$$url=Fe(this.$$path)+(t?"?"+t:"")+e,this.$$absUrl=o+this.$$url.substr(1)},this.$$rewrite=function(t){var e,n;return(e=He(r,t))!==it?(e=He(i,n=e))!==it?o+(He("/",e)||e):r+n:(e=He(o,t))!==it?o+e:o==t+"/"?o:void 0}}function Xe(n,r){var i=ze(n);_e(n,this,n),this.$$parse=function(t){var e=He(n,t)||He(i,t),e="#"==e.charAt(0)?He(r,e):this.$$html5?e:"";if(!ct(e))throw Ie("ihshprfx",'Invalid url "{0}", missing hash prefix "{1}".',t,r);Le(e,this,n),this.$$path=function(t,e,n){var r=/^\/[A-Z]:(\/.*)/;0===e.indexOf(n)&&(e=e.replace(n,""));if(r.exec(e))return t;return(r=r.exec(t))?r[1]:t}(this.$$path,e,n),this.$$compose()},this.$$compose=function(){var t=W(this.$$search),e=this.$$hash?"#"+X(this.$$hash):"";this.$$url=Fe(this.$$path)+(t?"?"+t:"")+e,this.$$absUrl=n+(this.$$url?r+this.$$url:"")},this.$$rewrite=function(t){if(Be(n)==Be(t))return t}}function Qe(n,r){this.$$html5=!0,Xe.apply(this,arguments);var i=ze(n);this.$$rewrite=function(t){var e;return n==Be(t)?t:(e=He(i,t))?n+r+e:i===t+"/"?i:void 0},this.$$compose=function(){var t=W(this.$$search),e=this.$$hash?"#"+X(this.$$hash):"";this.$$url=Fe(this.$$path)+(t?"?"+t:"")+e,this.$$absUrl=n+r+this.$$url}}function Je(t){return function(){return this[t]}}function Ge(e,n){return function(t){return k(t)?this[e]:(this[e]=n(t),this.$$compose(),this)}}function Ke(){var d="",a=!1;this.hashPrefix=function(t){return I(t)?(d=t,this):d},this.html5Mode=function(t){return I(t)?(a=t,this):a},this.$get=["$rootScope","$browser","$sniffer","$rootElement",function(u,c,t,l){var f,e,n=c.baseHref(),r=c.url(),h=a?(f=(e=r).substring(0,e.indexOf("/",e.indexOf("//")+2))+(n||"/"),t.history?We:Qe):(f=Be(r),Xe),p=new h(f,"#"+d);p.$$parse(p.$$rewrite(r)),l.on("click",function(t){if(!t.ctrlKey&&!t.metaKey&&2!=t.which){for(var e=ot(t.target);"a"!==w(e[0].nodeName);)if(e[0]===l[0]||!(e=e.parent())[0])return;var n=e.prop("href");if(ut(n)&&"[object SVGAnimatedString]"===n.toString()&&(n=An(n.animVal).href),h===Qe){var r=e.attr("href")||e.attr("xlink:href");if(r.indexOf("://")<0){var i="#"+d;if("/"==r[0])n=f+i+r;else if("#"==r[0])n=f+i+(p.path()||"/")+r;else{for(var o=p.path().split("/"),a=r.split("/"),s=0;s<a.length;s++)"."!=a[s]&&(".."==a[s]?o.pop():a[s].length&&o.push(a[s]));n=f+i+o.join("/")}}}i=p.$$rewrite(n);n&&!e.attr("target")&&i&&!t.isDefaultPrevented()&&(t.preventDefault(),i!=c.url()&&(p.$$parse(i),u.$apply(),$.angular["ff-684208-preventDefault"]=!0))}}),p.absUrl()!=r&&c.url(p.absUrl(),!0),c.onUrlChange(function(e){p.absUrl()!=e&&(u.$evalAsync(function(){var t=p.absUrl();p.$$parse(e),u.$broadcast("$locationChangeStart",e,t).defaultPrevented?(p.$$parse(t),c.url(t)):o(t)}),u.$$phase||u.$digest())});var i=0;return u.$watch(function(){var t=c.url(),e=p.$$replace;return i&&t==p.absUrl()||(i++,u.$evalAsync(function(){u.$broadcast("$locationChangeStart",p.absUrl(),t).defaultPrevented?p.$$parse(t):(c.url(p.absUrl(),e),o(t))})),p.$$replace=!1,i}),p;function o(t){u.$broadcast("$locationChangeSuccess",p.absUrl(),t)}}]}function Ye(){var n=!0,r=this;this.debugEnabled=function(t){return I(t)?(n=t,this):n},this.$get=["$window",function(i){return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:(t=e("debug"),function(){n&&t.apply(r,arguments)})};var t;function e(t){var n=i.console||{},r=n[t]||n.log||E,e=!1;try{e=!!r.apply}catch(t){}return e?function(){var e=[];return at(arguments,function(t){e.push(((t=t)instanceof Error&&(t.stack?t=t.message&&-1===t.stack.indexOf(t.message)?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t))}),r.apply(n,e)}:function(t,e){r(t,null==e?"":e)}}}]}Qe.prototype=Xe.prototype=We.prototype={$$html5:!(ye.$inject=["$provide","$$sanitizeUriProvider"]),$$replace:!1,absUrl:Je("$$absUrl"),url:function(t,e){if(k(t))return this.$$url;t=qe.exec(t);return t[1]&&this.path(decodeURIComponent(t[1])),(t[2]||t[1])&&this.search(t[3]||""),this.hash(t[5]||"",e),this},protocol:Je("$$protocol"),host:Je("$$host"),port:Je("$$port"),path:Ge("$$path",function(t){return"/"==t.charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(ct(t))this.$$search=z(t);else{if(!ut(t))throw Ie("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");this.$$search=t}break;default:k(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:Ge("$$hash",b),replace:function(){return this.$$replace=!0,this}};var Ze,tn=m("$parse"),en={};function nn(t,e){if("constructor"===t)throw tn("isecfld",'Referencing "constructor" field in Angular expressions is disallowed! Expression: {0}',e);return t}function rn(t,e){if(t){if(t.constructor===t)throw tn("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(t.document&&t.location&&t.alert&&t.setInterval)throw tn("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",e);if(t.children&&(t.nodeName||t.prop&&t.attr&&t.find))throw tn("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",e)}return t}var on={null:function(){return null},true:function(){return!0},false:function(){return!1},undefined:E,"+":function(t,e,n,r){return n=n(t,e),r=r(t,e),I(n)?I(r)?n+r:n:I(r)?r:it},"-":function(t,e,n,r){return n=n(t,e),r=r(t,e),(I(n)?n:0)-(I(r)?r:0)},"*":function(t,e,n,r){return n(t,e)*r(t,e)},"/":function(t,e,n,r){return n(t,e)/r(t,e)},"%":function(t,e,n,r){return n(t,e)%r(t,e)},"^":function(t,e,n,r){return n(t,e)^r(t,e)},"=":E,"===":function(t,e,n,r){return n(t,e)===r(t,e)},"!==":function(t,e,n,r){return n(t,e)!==r(t,e)},"==":function(t,e,n,r){return n(t,e)==r(t,e)},"!=":function(t,e,n,r){return n(t,e)!=r(t,e)},"<":function(t,e,n,r){return n(t,e)<r(t,e)},">":function(t,e,n,r){return n(t,e)>r(t,e)},"<=":function(t,e,n,r){return n(t,e)<=r(t,e)},">=":function(t,e,n,r){return n(t,e)>=r(t,e)},"&&":function(t,e,n,r){return n(t,e)&&r(t,e)},"||":function(t,e,n,r){return n(t,e)||r(t,e)},"&":function(t,e,n,r){return n(t,e)&r(t,e)},"|":function(t,e,n,r){return r(t,e)(t,e,n(t,e))},"!":function(t,e,n){return!n(t,e)}},an={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},sn=function(t){this.options=t};sn.prototype={constructor:sn,lex:function(t){for(this.text=t,this.index=0,this.ch=it,this.lastCh=":",this.tokens=[];this.index<this.text.length;){if(this.ch=this.text.charAt(this.index),this.is("\"'"))this.readString(this.ch);else if(this.isNumber(this.ch)||this.is(".")&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(this.ch))this.readIdent();else if(this.is("(){}[].,;:?"))this.tokens.push({index:this.index,text:this.ch}),this.index++;else{if(this.isWhitespace(this.ch)){this.index++;continue}var e=this.ch+this.peek(),n=e+this.peek(2),r=on[this.ch],i=on[e],o=on[n];o?(this.tokens.push({index:this.index,text:n,fn:o}),this.index+=3):i?(this.tokens.push({index:this.index,text:e,fn:i}),this.index+=2):r?(this.tokens.push({index:this.index,text:this.ch,fn:r}),this.index+=1):this.throwError("Unexpected next character ",this.index,this.index+1)}this.lastCh=this.ch}return this.tokens},is:function(t){return-1!==t.indexOf(this.ch)},was:function(t){return-1!==t.indexOf(this.lastCh)},peek:function(t){t=t||1;return this.index+t<this.text.length&&this.text.charAt(this.index+t)},isNumber:function(t){return"0"<=t&&t<="9"},isWhitespace:function(t){return" "===t||"\r"===t||"\t"===t||"\n"===t||"\v"===t||" "===t},isIdent:function(t){return"a"<=t&&t<="z"||"A"<=t&&t<="Z"||"_"===t||"$"===t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;n=I(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw tn("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,n,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=w(this.text.charAt(this.index));if("."==n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}t=+t,this.tokens.push({index:e,text:t,literal:!0,constant:!0,fn:function(){return t}})},readIdent:function(){for(var t,e,n,r,i=this,o="",a=this.index;this.index<this.text.length&&("."===(r=this.text.charAt(this.index))||this.isIdent(r)||this.isNumber(r));)"."===r&&(t=this.index),o+=r,this.index++;if(t)for(e=this.index;e<this.text.length;){if("("===(r=this.text.charAt(e))){n=o.substr(t-a+1),o=o.substr(0,t-a),this.index=e;break}if(!this.isWhitespace(r))break;e++}var s,u={index:a,text:o};on.hasOwnProperty(o)?(u.fn=on[o],u.literal=!0,u.constant=!0):(s=hn(o,this.options,this.text),u.fn=st(function(t,e){return s(t,e)},{assign:function(t,e){return cn(t,o,e,i.text,i.options)}})),this.tokens.push(u),n&&(this.tokens.push({index:t,text:"."}),this.tokens.push({index:t+1,text:n}))},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o,a=this.text.charAt(this.index);if(r+=a,i)"u"===a?((o=this.text.substring(this.index+1,this.index+5)).match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+o+"]"),this.index+=4,n+=String.fromCharCode(parseInt(o,16))):n+=an[a]||a,i=!1;else if("\\"===a)i=!0;else{if(a===t)return this.index++,void this.tokens.push({index:e,text:r,string:n,literal:!0,constant:!0,fn:function(){return n}});n+=a}this.index++}this.throwError("Unterminated quote",e)}};var un=function(t,e,n){this.lexer=t,this.$filter=e,this.options=n};function cn(t,e,n,r,i){i=i||{};for(var o,a=e.split(".");1<a.length;0){var s=t[o=nn(a.shift(),r)];s||(s={},t[o]=s),(t=s).then&&i.unwrapPromises&&(Ze(r),"$$v"in t||function(e){e.then(function(t){e.$$v=t})}(t),t.$$v===it&&(t.$$v={}),t=t.$$v)}return t[o=nn(a.shift(),r)]=n}un.ZERO=st(function(){return 0},{constant:!0}),un.prototype={constructor:un,parse:function(t){this.text=t,this.tokens=this.lexer.lex(t);t=this.statements();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t.literal=!!t.literal,t.constant=!!t.constant,t},primary:function(){var t,e,n,r;for(this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():((e=(t=this.expect()).fn)||this.throwError("not a primary expression",t),e.literal=!!t.literal,e.constant=!!t.constant);n=this.expect("(","[",".");)"("===n.text?(e=this.functionCall(e,r),r=null):"["===n.text?(r=e,e=this.objectIndex(e)):"."===n.text?(r=e,e=this.fieldAccess(e)):this.throwError("IMPOSSIBLE");return e},throwError:function(t,e){throw tn("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},peekToken:function(){if(0===this.tokens.length)throw tn("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){if(0<this.tokens.length){var i=this.tokens[0],o=i.text;if(o===t||o===e||o===n||o===r||!t&&!e&&!n&&!r)return i}return!1},expect:function(t,e,n,r){r=this.peek(t,e,n,r);return!!r&&(this.tokens.shift(),r)},consume:function(t){this.expect(t)||this.throwError("is unexpected, expecting ["+t+"]",this.peek())},unaryFn:function(n,r){return st(function(t,e){return n(t,e,r)},{constant:r.constant})},ternaryFn:function(n,r,i){return st(function(t,e){return(n(t,e)?r:i)(t,e)},{constant:n.constant&&r.constant&&i.constant})},binaryFn:function(n,r,i){return st(function(t,e){return r(t,e,n,i)},{constant:n.constant&&i.constant})},statements:function(){for(var o=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&o.push(this.filterChain()),!this.expect(";"))return 1===o.length?o[0]:function(t,e){for(var n,r=0;r<o.length;r++){var i=o[r];i&&(n=i(t,e))}return n}},filterChain:function(){for(var t,e=this.expression();;){if(!(t=this.expect("|")))return e;e=this.binaryFn(e,t.fn,this.filter())}},filter:function(){for(var t=this.expect(),o=this.$filter(t.text),a=[];;){if(!this.expect(":")){var e=function(t,e,n){for(var r=[n],i=0;i<a.length;i++)r.push(a[i](t,e));return o.apply(t,r)};return function(){return e}}a.push(this.expression())}},expression:function(){return this.assignment()},assignment:function(){var n,t,r=this.ternary();return(t=this.expect("="))?(r.assign||this.throwError("implies assignment but ["+this.text.substring(0,t.index)+"] can not be assigned to",t),n=this.ternary(),function(t,e){return r.assign(t,n(t,e),e)}):r},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")?(t=this.ternary(),(e=this.expect(":"))?this.ternaryFn(n,t,this.ternary()):void this.throwError("expected :",e)):n},logicalOR:function(){for(var t,e=this.logicalAND();;){if(!(t=this.expect("||")))return e;e=this.binaryFn(e,t.fn,this.logicalAND())}},logicalAND:function(){var t,e=this.equality();return(t=this.expect("&&"))&&(e=this.binaryFn(e,t.fn,this.logicalAND())),e},equality:function(){var t,e=this.relational();return(t=this.expect("==","!=","===","!=="))&&(e=this.binaryFn(e,t.fn,this.equality())),e},relational:function(){var t,e=this.additive();return(t=this.expect("<",">","<=",">="))&&(e=this.binaryFn(e,t.fn,this.relational())),e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e=this.binaryFn(e,t.fn,this.multiplicative());return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e=this.binaryFn(e,t.fn,this.unary());return e},unary:function(){var t;return this.expect("+")?this.primary():(t=this.expect("-"))?this.binaryFn(un.ZERO,t.fn,this.unary()):(t=this.expect("!"))?this.unaryFn(t.fn,this.unary()):this.primary()},fieldAccess:function(r){var i=this,o=this.expect().text,a=hn(o,this.options,this.text);return st(function(t,e,n){return a(n||r(t,e))},{assign:function(t,e,n){return cn(r(t,n),o,e,i.text,i.options)}})},objectIndex:function(i){var o=this,a=this.expression();return this.consume("]"),st(function(t,e){var n,r=i(t,e),e=a(t,e);return r?((e=rn(r[e],o.text))&&e.then&&o.options.unwrapPromises&&("$$v"in(n=e)||(n.$$v=it,n.then(function(t){n.$$v=t})),e=e.$$v),e):it},{assign:function(t,e,n){var r=a(t,n);return rn(i(t,n),o.text)[r]=e}})},functionCall:function(a,s){var u=[];if(")"!==this.peekToken().text)for(;u.push(this.expression()),this.expect(","););this.consume(")");var c=this;return function(t,e){for(var n=[],r=s?s(t,e):t,i=0;i<u.length;i++)n.push(u[i](t,e));var o=a(t,e,r)||E;return rn(r,c.text),rn(o,c.text),rn(o.apply?o.apply(r,n):o(n[0],n[1],n[2],n[3],n[4]),c.text)}},arrayDeclaration:function(){var i=[],t=!0;if("]"!==this.peekToken().text)do{if(this.peek("]"))break;var e=this.expression()}while(i.push(e),e.constant||(t=!1),this.expect(","));return this.consume("]"),st(function(t,e){for(var n=[],r=0;r<i.length;r++)n.push(i[r](t,e));return n},{literal:!0,constant:t})},object:function(){var o=[],t=!0;if("}"!==this.peekToken().text)do{if(this.peek("}"))break;var e=this.expect(),n=e.string||e.text;this.consume(":");e=this.expression()}while(o.push({key:n,value:e}),e.constant||(t=!1),this.expect(","));return this.consume("}"),st(function(t,e){for(var n={},r=0;r<o.length;r++){var i=o[r];n[i.key]=i.value(t,e)}return n},{literal:!0,constant:t})}};var ln={};function fn(r,i,o,a,s,u,t){return nn(r,u),nn(i,u),nn(o,u),nn(a,u),nn(s,u),t.unwrapPromises?function(t,e){var n,t=e&&e.hasOwnProperty(r)?e:t;return null==t?t:((t=t[r])&&t.then&&(Ze(u),"$$v"in t||((n=t).$$v=it,n.then(function(t){n.$$v=t})),t=t.$$v),i?null==t?it:((t=t[i])&&t.then&&(Ze(u),"$$v"in t||((n=t).$$v=it,n.then(function(t){n.$$v=t})),t=t.$$v),o?null==t?it:((t=t[o])&&t.then&&(Ze(u),"$$v"in t||((n=t).$$v=it,n.then(function(t){n.$$v=t})),t=t.$$v),a?null==t?it:((t=t[a])&&t.then&&(Ze(u),"$$v"in t||((n=t).$$v=it,n.then(function(t){n.$$v=t})),t=t.$$v),s?null==t?it:((t=t[s])&&t.then&&(Ze(u),"$$v"in t||((n=t).$$v=it,n.then(function(t){n.$$v=t})),t=t.$$v),t):t):t):t):t)}:function(t,e){t=e&&e.hasOwnProperty(r)?e:t;return null==t?t:(t=t[r],i?null==t?it:(t=t[i],o?null==t?it:(t=t[o],a?null==t?it:(t=t[a],s?null==t?it:t=t[s]:t):t):t):t)}}function hn(t,i,o){if(ln.hasOwnProperty(t))return ln[t];var n,r,a,s,u,c=t.split("."),l=c.length,e=i.unwrapPromises||1!==l?i.unwrapPromises||2!==l?i.csp?l<6?fn(c[0],c[1],c[2],c[3],c[4],o,i):function(t,e){for(var n,r=0;n=fn(c[r++],c[r++],c[r++],c[r++],c[r++],o,i)(t,e),e=it,t=n,r<l;);return n}:(n="var p;\n",at(c,function(t,e){nn(t,o),n+="if(s == null) return undefined;\ns="+(e?"s":'((k&&k.hasOwnProperty("'+t+'"))?k:s)')+'["'+t+'"];\n'+(i.unwrapPromises?'if (s && s.then) {\n pw("'+o.replace(/(["\r\n])/g,"\\$1")+'");\n if (!("$$v" in s)) {\n p=s;\n p.$$v = undefined;\n p.then(function(v) {p.$$v=v;});\n}\n s=s.$$v\n}\n':"")}),n+="return s;",(r=new Function("s","k","pw",n)).toString=S(n),i.unwrapPromises?function(t,e){return r(t,e,Ze)}:r):(a=c[0],s=c[1],nn(a,e=o),nn(s,e),function(t,e){return null==t||null==(t=(e&&e.hasOwnProperty(a)?e:t)[a])?it:t[s]}):(nn(u=c[0],o),function(t,e){return null==t?it:(e&&e.hasOwnProperty(u)?e:t)[u]});return"hasOwnProperty"!==t&&(ln[t]=e),e}function pn(){var r={},i={csp:!1,unwrapPromises:!1,logPromiseWarnings:!0};this.unwrapPromises=function(t){return I(t)?(i.unwrapPromises=!!t,this):i.unwrapPromises},this.logPromiseWarnings=function(t){return I(t)?(i.logPromiseWarnings=t,this):i.logPromiseWarnings},this.$get=["$filter","$sniffer","$log",function(n,t,e){return i.csp=t.csp,Ze=function(t){i.logPromiseWarnings&&!en.hasOwnProperty(t)&&(en[t]=!0,e.warn("[$parse] Promise found in the expression `"+t+"`. Automatic unwrapping of promises in Angular expressions is deprecated."))},function(t){switch(typeof t){case"string":if(r.hasOwnProperty(t))return r[t];var e=new sn(i),e=new un(e,n,i).parse(t);return"hasOwnProperty"!==t&&(r[t]=e),e;case"function":return t;default:return E}}}]}function dn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return f=function(t){e.$evalAsync(t)},h=t,p=function(){var s,u=[],e={resolve:function(t){var r;u&&(r=u,u=it,s=d(t),r.length&&f(function(){for(var t,e=0,n=r.length;e<n;e++)t=r[e],s.then(t[0],t[1],t[2])}))},reject:function(t){e.resolve(n(t))},notify:function(n){var r;!u||(r=u).length&&f(function(){for(var t=0,e=r.length;t<e;t++)r[t][2](n)})},promise:{then:function(e,n,r){function t(t){try{a.resolve((ft(e)?e:c)(t))}catch(t){a.reject(t),h(t)}}function i(t){try{a.resolve((ft(n)?n:l)(t))}catch(t){a.reject(t),h(t)}}function o(t){try{a.notify((ft(r)?r:c)(t))}catch(t){h(t)}}var a=p();return u?u.push([t,i,o]):s.then(t,i,o),a.promise},catch:function(t){return this.then(null,t)},finally:function(r){function i(t,e){var n=p();return e?n.resolve(t):n.reject(t),n.promise}function e(t,e){var n=null;try{n=(r||c)()}catch(t){return i(t,!1)}return n&&ft(n.then)?n.then(function(){return i(t,e)},function(t){return i(t,!1)}):i(t,e)}return this.then(function(t){return e(t,!0)},function(t){return e(t,!1)})}}};return e},d=function(n){return n&&ft(n.then)?n:{then:function(t){var e=p();return f(function(){e.resolve(t(n))}),e.promise}}},$=function(t){var e=p();return e.reject(t),e.promise},n=function(r){return{then:function(t,e){var n=p();return f(function(){try{n.resolve((ft(e)?e:l)(r))}catch(t){n.reject(t),h(t)}}),n.promise}}},{defer:p,reject:$,when:function(t,e,n,r){function i(t){try{return(ft(e)?e:c)(t)}catch(t){return h(t),$(t)}}function o(t){try{return(ft(n)?n:l)(t)}catch(t){return h(t),$(t)}}function a(t){try{return(ft(r)?r:c)(t)}catch(t){h(t)}}var s,u=p();return f(function(){d(t).then(function(t){s||(s=!0,u.resolve(d(t).then(i,o,a)))},function(t){s||(s=!0,u.resolve(o(t)))},function(t){s||u.notify(a(t))})}),u.promise},all:function(t){var n=p(),r=0,i=lt(t)?[]:{};return at(t,function(t,e){r++,d(t).then(function(t){i.hasOwnProperty(e)||(i[e]=t,--r||n.resolve(i))},function(t){i.hasOwnProperty(e)||n.reject(t)})}),0===r&&n.resolve(i),n.promise}};function c(t){return t}function l(t){return $(t)}var f,h,p,d,$,n}]}function $n(){this.$get=["$window","$timeout",function(t,n){var r=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame,i=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,e=!!r,t=e?function(t){var e=r(t);return function(){i(e)}}:function(t){var e=n(t,16.66,!1);return function(){n.cancel(e)}};return t.supported=e,t}]}function gn(){var y=10,w=m("$rootScope"),b=null;this.digestTtl=function(t){return arguments.length&&(y=t),y},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(t,d,$,e){function n(){this.$id=i(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,(this.this=this.$root=this).$$destroyed=!1,this.$$asyncQueue=[],this.$$postDigestQueue=[],this.$$listeners={},this.$$listenerCount={},this.$$isolateBindings={}}n.prototype={constructor:n,$new:function(t){var e;return t?((e=new n).$root=this.$root,e.$$asyncQueue=this.$$asyncQueue,e.$$postDigestQueue=this.$$postDigestQueue):(this.$$childScopeClass||(this.$$childScopeClass=function(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$id=i(),this.$$childScopeClass=null},this.$$childScopeClass.prototype=this),e=new this.$$childScopeClass),(e.this=e).$parent=this,e.$$prevSibling=this.$$childTail,this.$$childHead?(this.$$childTail.$$nextSibling=e,this.$$childTail=e):this.$$childHead=this.$$childTail=e,e},$watch:function(t,e,n){var r,i,o=u(t,"watch"),a=this.$$watchers,s={fn:e,last:m,get:o,exp:t,eq:!!n};return b=null,ft(e)||(r=u(e||E,"listener"),s.fn=function(t,e,n){r(n)}),"string"==typeof t&&o.constant&&(i=s.fn,s.fn=function(t,e,n){i.call(this,t,e,n),D(a,s)}),(a=a||(this.$$watchers=[])).unshift(s),function(){D(a,s),b=null}},$watchCollection:function(t,n){var r,i,o,a=this,s=1<n.length,u=0,c=$(t),l=[],f={},h=!0,p=0;return this.$watch(function(){var t,e;if(ut(r=c(a)))if(M(r)){i!==l&&(p=(i=l).length=0,u++),t=r.length,p!==t&&(u++,i.length=p=t);for(var n=0;n<t;n++)i[n]!=i[n]&&r[n]!=r[n]||i[n]===r[n]||(u++,i[n]=r[n])}else{for(e in i!==f&&(i=f={},p=0,u++),t=0,r)r.hasOwnProperty(e)&&(t++,i.hasOwnProperty(e)?i[e]!==r[e]&&(u++,i[e]=r[e]):(p++,i[e]=r[e],u++));if(t<p)for(e in u++,i)i.hasOwnProperty(e)&&!r.hasOwnProperty(e)&&(p--,delete i[e])}else i!==r&&(i=r,u++);return u},function(){if(h?(h=!1,n(r,r,a)):n(r,o,a),s)if(ut(r))if(M(r)){o=new Array(r.length);for(var t=0;t<r.length;t++)o[t]=r[t]}else for(var e in o={},r)x.call(r,e)&&(o[e]=r[e]);else o=r})},$digest:function(){var t,e,n,r,i,o,a,s,u,c,l=this.$$asyncQueue,f=this.$$postDigestQueue,h=y,p=[];g("$digest"),b=null;do{for(i=!1,a=this;l.length;){try{(c=l.shift()).scope.$eval(c.expression)}catch(t){v(),d(t)}b=null}t:do{if(n=a.$$watchers)for(r=n.length;r--;)try{if(u=n[r])if((t=u.get(a))===(e=u.last)||(u.eq?dt(t,e):"number"==typeof t&&"number"==typeof e&&isNaN(t)&&isNaN(e))){if(u===b){i=!1;break t}}else i=!0,(b=u).last=u.eq?R(t,null):t,u.fn(t,e===m?t:e,a),h<5&&(p[s=4-h]||(p[s]=[]),u=ft(u.exp)?"fn: "+(u.exp.name||u.exp.toString()):u.exp,u+="; newVal: "+_(t)+"; oldVal: "+_(e),p[s].push(u))}catch(t){v(),d(t)}if(!(o=a.$$childHead||a!==this&&a.$$nextSibling))for(;a!==this&&!(o=a.$$nextSibling);)a=a.$parent}while(a=o);if((i||l.length)&&!h--)throw v(),w("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",y,_(p))}while(i||l.length);for(v();f.length;)try{f.shift()()}catch(t){d(t)}},$destroy:function(){var t;this.$$destroyed||(t=this.$parent,this.$broadcast("$destroy"),this.$$destroyed=!0,this!==r&&(at(this.$$listenerCount,F(null,o,this)),t.$$childHead==this&&(t.$$childHead=this.$$nextSibling),t.$$childTail==this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=null,this.$$listeners={},this.$$watchers=this.$$asyncQueue=this.$$postDigestQueue=[],this.$destroy=this.$digest=this.$apply=E,this.$on=this.$watch=function(){return E}))},$eval:function(t,e){return $(t)(this,e)},$evalAsync:function(t){r.$$phase||r.$$asyncQueue.length||e.defer(function(){r.$$asyncQueue.length&&r.$digest()}),this.$$asyncQueue.push({scope:this,expression:t})},$$postDigest:function(t){this.$$postDigestQueue.push(t)},$apply:function(t){try{return g("$apply"),this.$eval(t)}catch(t){d(t)}finally{v();try{r.$digest()}catch(t){throw d(t),t}}},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);for(var r=this;r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++,r=r.$parent;);var i=this;return function(){n[N(n,e)]=null,o(i,1,t)}},$emit:function(t,e){var n,r,i,o=[],a=this,s=!1,u={name:t,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},c=q([u],arguments,1);do{for(n=a.$$listeners[t]||o,u.currentScope=a,r=0,i=n.length;r<i;r++)if(n[r])try{n[r].apply(null,c)}catch(t){d(t)}else n.splice(r,1),r--,i--;if(s)return u}while(a=a.$parent);return u},$broadcast:function(t,e){for(var n,r,i,o=this,a=o,s=o,u={name:t,targetScope:o,preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},c=q([u],arguments,1);a=s;){for(r=0,i=(n=(u.currentScope=a).$$listeners[t]||[]).length;r<i;r++)if(n[r])try{n[r].apply(null,c)}catch(t){d(t)}else n.splice(r,1),r--,i--;if(!(s=a.$$listenerCount[t]&&a.$$childHead||a!==o&&a.$$nextSibling))for(;a!==o&&!(s=a.$$nextSibling);)a=a.$parent}return u}};var r=new n;return r;function g(t){if(r.$$phase)throw w("inprog","{0} already in progress",r.$$phase);r.$$phase=t}function v(){r.$$phase=null}function u(t,e){t=$(t);return G(t,e),t}function o(t,e,n){for(;t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n],t=t.$parent;);}function m(){}}]}function vn(){var r=/^\s*(https?|ftp|mailto|tel|file):/,i=/^\s*(https?|ftp|file):|data:image\//;this.aHrefSanitizationWhitelist=function(t){return I(t)?(r=t,this):r},this.imgSrcSanitizationWhitelist=function(t){return I(t)?(i=t,this):i},this.$get=function(){return function(t,e){var n,e=e?i:r;return T&&!(8<=T)||""===(n=An(t).href)||n.match(e)?t:"unsafe:"+n}}}var mn=m("$sce"),yn={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"};function wn(t){var e=[];return I(t)&&at(t,function(t){e.push(function(t){if("self"===t)return t;if(ct(t)){if(-1<t.indexOf("***"))throw mn("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=t.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08").replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+t+"$")}if(A(t))return new RegExp("^"+t.source+"$");throw mn("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}(t))}),e}function bn(){this.SCE_CONTEXTS=yn;var a=["self"],s=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(a=wn(t)),a},this.resourceUrlBlacklist=function(t){return arguments.length&&(s=wn(t)),s},this.$get=["$injector",function(t){var r=function(){throw mn("unsafe","Attempting to use an unsafe value in a safe context.")};function o(t,e){return"self"===t?Tn(e):t.exec(e.href)}function e(t){function e(t){this.$$unwrapTrustedValue=function(){return t}}return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}t.has("$sanitize")&&(r=t.get("$sanitize"));var n=e(),i={};return i[yn.HTML]=e(n),i[yn.CSS]=e(n),i[yn.URL]=e(n),i[yn.JS]=e(n),i[yn.RESOURCE_URL]=e(i[yn.URL]),{trustAs:function(t,e){var n=i.hasOwnProperty(t)?i[t]:null;if(!n)throw mn("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||e===it||""===e)return e;if("string"!=typeof e)throw mn("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)},getTrusted:function(t,e){if(null===e||e===it||""===e)return e;var n=i.hasOwnProperty(t)?i[t]:null;if(n&&e instanceof n)return e.$$unwrapTrustedValue();if(t===yn.RESOURCE_URL){if(function(t){for(var e=An(t.toString()),n=!1,r=0,i=a.length;r<i;r++)if(o(a[r],e)){n=!0;break}if(n)for(r=0,i=s.length;r<i;r++)if(o(s[r],e)){n=!1;break}return n}(e))return e;throw mn("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",e.toString())}if(t===yn.HTML)return r(e);throw mn("unsafe","Attempting to use an unsafe value in a safe context.")},valueOf:function(t){return t instanceof n?t.$$unwrapTrustedValue():t}}}]}function xn(){var s=!0;this.enabled=function(t){return arguments.length&&(s=!!t),s},this.$get=["$parse","$sniffer","$sceDelegate",function(e,t,n){if(s&&t.msie&&t.msieDocumentMode<8)throw mn("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var i=pt(yn);i.isEnabled=function(){return s},i.trustAs=n.trustAs,i.getTrusted=n.getTrusted,i.valueOf=n.valueOf,s||(i.trustAs=i.getTrusted=function(t,e){return e},i.valueOf=b),i.parseAs=function(n,t){var r=e(t);return r.literal&&r.constant?r:function(t,e){return i.getTrusted(n,r(t,e))}};var r=i.parseAs,o=i.getTrusted,a=i.trustAs;return at(yn,function(e,t){t=w(t);i[Et("parse_as_"+t)]=function(t){return r(e,t)},i[Et("get_trusted_"+t)]=function(t){return o(e,t)},i[Et("trust_as_"+t)]=function(t){return a(e,t)}}),i}]}function Sn(){this.$get=["$window","$document",function(t,e){var n,r,i={},o=y((/android (\d+)/.exec(w((t.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((t.navigator||{}).userAgent),s=e[0]||{},u=s.documentMode,c=/^(Moz|webkit|O|ms)(?=[A-Z])/,l=s.body&&s.body.style,f=!1,e=!1;if(l){for(var h in l)if(r=c.exec(h)){n=(n=r[0]).substr(0,1).toUpperCase()+n.substr(1);break}n=n||"WebkitOpacity"in l&&"webkit",f=!!("transition"in l||n+"Transition"in l),e=!!("animation"in l||n+"Animation"in l),!o||f&&e||(f=ct(s.body.style.webkitTransition),e=ct(s.body.style.webkitAnimation))}return{history:!(!t.history||!t.history.pushState||o<4||a),hashchange:"onhashchange"in t&&(!u||7<u),hasEvent:function(t){return("input"!=t||9!=T)&&(k(i[t])&&(e=s.createElement("div"),i[t]="on"+t in e),i[t]);var e},csp:U(),vendorPrefix:n,transitions:f,animations:e,android:o,msie:T,msieDocumentMode:u}}]}function Cn(){this.$get=["$rootScope","$browser","$q","$exceptionHandler",function(a,s,u,c){var l={};function t(t,e,n){var r=u.defer(),i=r.promise,o=I(n)&&!n,e=s.defer(function(){try{r.resolve(t())}catch(t){r.reject(t),c(t)}finally{delete l[i.$$timeoutId]}o||a.$apply()},e);return i.$$timeoutId=e,l[e]=r,i}return t.cancel=function(t){return!!(t&&t.$$timeoutId in l)&&(l[t.$$timeoutId].reject("canceled"),delete l[t.$$timeoutId],s.defer.cancel(t.$$timeoutId))},t}]}var En=rt.createElement("a"),kn=An($.location.href);function An(t){return T&&(En.setAttribute("href",t),t=En.href),En.setAttribute("href",t),{href:En.href,protocol:En.protocol?En.protocol.replace(/:$/,""):"",host:En.host,search:En.search?En.search.replace(/^\?/,""):"",hash:En.hash?En.hash.replace(/^#/,""):"",hostname:En.hostname,port:En.port,pathname:"/"===En.pathname.charAt(0)?En.pathname:"/"+En.pathname}}function Tn(t){t=ct(t)?An(t):t;return t.protocol===kn.protocol&&t.host===kn.host}function On(){this.$get=S($)}function Mn(r){var i="Filter";function o(t,e){if(ut(t)){var n={};return at(t,function(t,e){n[e]=o(e,t)}),n}return r.factory(t+i,e)}this.register=o,this.$get=["$injector",function(e){return function(t){return e.get(t+i)}}],o("currency",jn),o("date",Ln),o("filter",Pn),o("json",Hn),o("limitTo",Wn),o("lowercase",Bn),o("number",Nn),o("orderBy",Xn),o("uppercase",zn)}function Pn(){return function(t,n,i){if(!lt(t))return t;var e=typeof i,r=[];r.check=function(t){for(var e=0;e<r.length;e++)if(!r[e](t))return!1;return!0},"function"!=e&&(i="boolean"==e&&i?function(t,e){return l.equals(t,e)}:function(t,e){if(t&&e&&"object"==typeof t&&"object"==typeof e){for(var n in t)if("$"!==n.charAt(0)&&x.call(t,n)&&i(t[n],e[n]))return!0;return!1}return e=(""+e).toLowerCase(),-1<(""+t).toLowerCase().indexOf(e)});var o=function(t,e){if("string"==typeof e&&"!"===e.charAt(0))return!o(t,e.substr(1));switch(typeof t){case"boolean":case"number":case"string":return i(t,e);case"object":if("object"==typeof e)return i(t,e);for(var n in t)if("$"!==n.charAt(0)&&o(t[n],e))return!0;return!1;case"array":for(var r=0;r<t.length;r++)if(o(t[r],e))return!0;return!1;default:return!1}};switch(typeof n){case"boolean":case"number":case"string":n={$:n};case"object":for(var a in n)!function(e){void 0!==n[e]&&r.push(function(t){return o("$"==e?t:t&&t[e],n[e])})}(a);break;case"function":r.push(n);break;default:return t}for(var s=[],u=0;u<t.length;u++){var c=t[u];r.check(c)&&s.push(c)}return s}}function jn(t){var n=t.NUMBER_FORMATS;return function(t,e){return k(e)&&(e=n.CURRENCY_SYM),Rn(t,n.PATTERNS[1],n.GROUP_SEP,n.DECIMAL_SEP,2).replace(/\u00A4/g,e)}}function Nn(t){var n=t.NUMBER_FORMATS;return function(t,e){return Rn(t,n.PATTERNS[0],n.GROUP_SEP,n.DECIMAL_SEP,e)}}Mn.$inject=["$provide"],jn.$inject=["$locale"],Nn.$inject=["$locale"];var Dn=".";function Rn(t,e,n,r,i){if(null==t||!isFinite(t)||ut(t))return"";var o,a=t<0,s=(t=Math.abs(t))+"",u="",c=[],l=!1;if(-1!==s.indexOf("e")&&((o=s.match(/([\d\.]+)e(-?)(\d+)/))&&"-"==o[2]&&o[3]>i+1?s="0":(u=s,l=!0)),l)0<i&&-1<t&&t<1&&(u=t.toFixed(i));else{s=(s.split(Dn)[1]||"").length;k(i)&&(i=Math.min(Math.max(e.minFrac,s),e.maxFrac));var f,s=Math.pow(10,i+1),h=(p=(""+(t=Math.floor(t*s+5)/s)).split(Dn))[0],p=p[1]||"",d=0,$=e.lgSize,g=e.gSize;if(h.length>=$+g)for(d=h.length-$,f=0;f<d;f++)(d-f)%g==0&&0!==f&&(u+=n),u+=h.charAt(f);for(f=d;f<h.length;f++)(h.length-f)%$==0&&0!==f&&(u+=n),u+=h.charAt(f);for(;p.length<i;)p+="0";i&&"0"!==i&&(u+=r+p.substr(0,i))}return c.push(a?e.negPre:e.posPre),c.push(u),c.push(a?e.negSuf:e.posSuf),c.join("")}function Un(t,e,n){var r="";for(t<0&&(r="-",t=-t),t=""+t;t.length<e;)t="0"+t;return n&&(t=t.substr(t.length-e)),r+t}function qn(e,n,r,i){return r=r||0,function(t){t=t["get"+e]();return(0<r||-r<t)&&(t+=r),0===t&&-12==r&&(t=12),Un(t,n,i)}}function Vn(n,r){return function(t,e){t=t["get"+n]();return e[c(r?"SHORT"+n:n)][t]}}var In={yyyy:qn("FullYear",4),yy:qn("FullYear",2,0,!0),y:qn("FullYear",1),MMMM:Vn("Month"),MMM:Vn("Month",!0),MM:qn("Month",2,1),M:qn("Month",1,1),dd:qn("Date",2),d:qn("Date",1),HH:qn("Hours",2),H:qn("Hours",1),hh:qn("Hours",2,-12),h:qn("Hours",1,-12),mm:qn("Minutes",2),m:qn("Minutes",1),ss:qn("Seconds",2),s:qn("Seconds",1),sss:qn("Milliseconds",3),EEEE:Vn("Day"),EEE:Vn("Day",!0),a:function(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]},Z:function(t){var e=-1*t.getTimezoneOffset(),t=0<=e?"+":"";return t+=Un(Math[0<e?"floor":"ceil"](e/60),2)+Un(Math.abs(e%60),2)}},Fn=/((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,_n=/^\-?\d+$/;function Ln(a){var s=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(e,t){var n,r,i="",o=[];if(t=t||"mediumDate",t=a.DATETIME_FORMATS[t]||t,ct(e)&&(e=(_n.test(e)?y:function(t){if(a=t.match(s)){var e=new Date(0),n=0,r=0,i=a[8]?e.setUTCFullYear:e.setFullYear,o=a[8]?e.setUTCHours:e.setHours;a[9]&&(n=y(a[9]+a[10]),r=y(a[9]+a[11])),i.call(e,y(a[1]),y(a[2])-1,y(a[3]));var i=y(a[4]||0)-n,n=y(a[5]||0)-r,r=y(a[6]||0),a=Math.round(1e3*parseFloat("0."+(a[7]||0)));return o.call(e,i,n,r,a),e}return t})(e)),h(e)&&(e=new Date(e)),!C(e))return e;for(;t;)t=(r=Fn.exec(t))?(o=q(o,r,1)).pop():(o.push(t),null);return at(o,function(t){n=In[t],i+=n?n(e,a.DATETIME_FORMATS):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),i}}function Hn(){return function(t){return _(t,!0)}}Ln.$inject=["$locale"];var Bn=S(w),zn=S(c);function Wn(){return function(t,e){if(!lt(t)&&!ct(t))return t;if(e=(Math.abs(Number(e))===1/0?Number:y)(e),ct(t))return e?0<=e?t.slice(0,e):t.slice(e,t.length):"";var n,r,i=[];for(e>t.length?e=t.length:e<-t.length&&(e=-t.length),r=0<e?(n=0,e):(n=t.length+e,t.length);n<r;n++)i.push(t[n]);return i}}function Xn(l){return function(t,i,e){if(!lt(t))return t;if(!i)return t;var r,o,a;i=lt(i)?i:[i],r=function(t){var e=!1,n=t||b;if(ct(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(e="-"==t.charAt(0),t=t.substring(1)),(n=l(t)).constant)){var r=n();return u(function(t,e){return c(t[r],e[r])},e)}return u(function(t,e){return c(n(t),n(e))},e)},a=[],at(i,function(t,e,n){a.push(r.call(o,t,e,n))}),i=a;for(var n=[],s=0;s<t.length;s++)n.push(t[s]);return n.sort(u(function(t,e){for(var n=0;n<i.length;n++){var r=i[n](t,e);if(0!==r)return r}return 0},e));function u(n,t){return H(t)?function(t,e){return n(e,t)}:n}function c(t,e){var n=typeof t,r=typeof e;return n==r?("string"==n&&(t=t.toLowerCase(),e=e.toLowerCase()),t===e?0:t<e?-1:1):n<r?-1:1}}}function Qn(t){return ft(t)&&(t={link:t}),t.restrict=t.restrict||"AC",S(t)}Xn.$inject=["$parse"];var Jn=S({restrict:"E",compile:function(t,e){if(T<=8&&(e.href||e.name||e.$set("href",""),t.append(rt.createComment("IE fix"))),!e.href&&!e.xlinkHref&&!e.name)return function(t,e){var n="[object SVGAnimatedString]"===s.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}),Gn={};at(Jt,function(t,r){var i;"multiple"!=t&&(i=be("ng-"+r),Gn[i]=function(){return{priority:100,link:function(t,e,n){t.$watch(n[i],function(t){n.$set(r,!!t)})}}})}),at(["src","srcset","href"],function(o){var a=be("ng-"+o);Gn[a]=function(){return{priority:99,link:function(t,e,n){var r=o,i=o;"href"===o&&"[object SVGAnimatedString]"===s.call(e.prop("href"))&&(i="xlinkHref",n.$attr[i]="xlink:href",r=null),n.$observe(a,function(t){t&&(n.$set(i,t),T&&r&&e.prop(r,n[i]))})}}}});var Kn={$addControl:E,$removeControl:E,$setValidity:E,$setDirty:E,$setPristine:E};function Yn(n,t,e,r){var i=this,o=n.parent().controller("form")||Kn,a=0,s=i.$error={},u=[];function c(t,e){e=e?"-"+vt(e,"-"):"",r.removeClass(n,(t?pr:hr)+e),r.addClass(n,(t?hr:pr)+e)}i.$name=t.name||t.ngForm,i.$dirty=!1,i.$pristine=!0,i.$valid=!0,i.$invalid=!1,o.$addControl(i),n.addClass(dr),c(!0),i.$addControl=function(t){K(t.$name,"input"),u.push(t),t.$name&&(i[t.$name]=t)},i.$removeControl=function(n){n.$name&&i[n.$name]===n&&delete i[n.$name],at(s,function(t,e){i.$setValidity(e,!0,n)}),D(u,n)},i.$setValidity=function(t,e,n){var r=s[t];if(e)r&&(D(r,n),r.length||(--a||(c(e),i.$valid=!0,i.$invalid=!1),c(!(s[t]=!1),t),o.$setValidity(t,!0,i)));else{if(a||c(e),r){if(-1!=N(r,n))return}else s[t]=r=[],a++,c(!1,t),o.$setValidity(t,!1,i);r.push(n),i.$valid=!1,i.$invalid=!0}},i.$setDirty=function(){r.removeClass(n,dr),r.addClass(n,$r),i.$dirty=!0,i.$pristine=!1,o.$setDirty()},i.$setPristine=function(){r.removeClass(n,$r),r.addClass(n,dr),i.$dirty=!1,i.$pristine=!0,at(u,function(t){t.$setPristine()})}}Yn.$inject=["$element","$attrs","$scope","$animate"];var t=function(t){return["$timeout",function(s){return{name:"form",restrict:t?"EAC":"E",controller:Yn,compile:function(){return{pre:function(t,e,n,r){var i;n.action||(i=function(t){t.preventDefault?t.preventDefault():t.returnValue=!1},wt(e[0],"submit",i),e.on("$destroy",function(){s(function(){bt(e[0],"submit",i)},0,!1)}));var o=e.parent().controller("form"),a=n.name||n.ngForm;a&&cn(t,a,r,a),o&&e.on("$destroy",function(){o.$removeControl(r),a&&cn(t,a,it,a),st(r,Kn)})}}}}}]},Zn=t(),tr=t(!0),er=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,nr=/^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*$/i,rr=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,ir={text:ar,number:function(t,e,n,r,i,o){ar(t,e,n,r,i,o),r.$parsers.push(function(t){var e=r.$isEmpty(t);return e||rr.test(t)?(r.$setValidity("number",!0),""===t?null:e?t:parseFloat(t)):(r.$setValidity("number",!1),it)}),function(e,n,t){var r=t.prop("validity");ut(r)&&e.$parsers.push(function(t){if(e.$error[n]||!(r.badInput||r.customError||r.typeMismatch)||r.valueMissing)return t;e.$setValidity(n,!1)})}(r,"number",e),r.$formatters.push(function(t){return r.$isEmpty(t)?"":""+t}),n.min&&(a=function(t){var e=parseFloat(n.min);return or(r,"min",r.$isEmpty(t)||e<=t,t)},r.$parsers.push(a),r.$formatters.push(a));{var a;n.max&&(a=function(t){var e=parseFloat(n.max);return or(r,"max",r.$isEmpty(t)||t<=e,t)},r.$parsers.push(a),r.$formatters.push(a))}r.$formatters.push(function(t){return or(r,"number",r.$isEmpty(t)||h(t),t)})},url:function(t,e,n,r,i,o){ar(t,e,n,r,i,o);o=function(t){return or(r,"url",r.$isEmpty(t)||er.test(t),t)};r.$formatters.push(o),r.$parsers.push(o)},email:function(t,e,n,r,i,o){ar(t,e,n,r,i,o);o=function(t){return or(r,"email",r.$isEmpty(t)||nr.test(t),t)};r.$formatters.push(o),r.$parsers.push(o)},radio:function(t,e,n,r){k(n.name)&&e.attr("name",i());e.on("click",function(){e[0].checked&&t.$apply(function(){r.$setViewValue(n.value)})}),r.$render=function(){var t=n.value;e[0].checked=t==r.$viewValue},n.$observe("value",r.$render)},checkbox:function(t,e,n,r){var i=n.ngTrueValue,o=n.ngFalseValue;ct(i)||(i=!0);ct(o)||(o=!1);e.on("click",function(){t.$apply(function(){r.$setViewValue(e[0].checked)})}),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return t!==i},r.$formatters.push(function(t){return t===i}),r.$parsers.push(function(t){return t?i:o})},hidden:E,button:E,submit:E,reset:E,file:E};function or(t,e,n,r){return t.$setValidity(e,n),n?r:it}function ar(n,r,i,o,t,e){var a,s=r.prop("validity"),u=r[0].placeholder,c={};t.android||(a=!1,r.on("compositionstart",function(t){a=!0}),r.on("compositionend",function(){a=!1,h()}));var l,f,h=function(t){var e;a||(e=r.val(),T&&"input"===(t||c).type&&r[0].placeholder!==u?u=r[0].placeholder:(H(i.ngTrim||"T")&&(e=ht(e)),(o.$viewValue!==e||s&&""===e&&!s.valueMissing)&&(n.$$phase?o.$setViewValue(e):n.$apply(function(){o.$setViewValue(e)}))))};t.hasEvent("input")?r.on("input",h):(f=function(){l=l||e.defer(function(){h(),l=null})},r.on("keydown",function(t){t=t.keyCode;91===t||15<t&&t<19||37<=t&&t<=40||f()}),t.hasEvent("paste")&&r.on("paste cut",f)),r.on("change",h),o.$render=function(){r.val(o.$isEmpty(o.$viewValue)?"":o.$viewValue)};var p,d,$,g,v=i.ngPattern;v&&(p=function(t,e){return or(o,"pattern",o.$isEmpty(e)||t.test(e),e)},t=(t=v.match(/^\/(.*)\/([gim]*)$/))?(v=new RegExp(t[1],t[2]),function(t){return p(v,t)}):function(t){var e=n.$eval(v);if(!e||!e.test)throw m("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",v,e,gt(r));return p(e,t)},o.$formatters.push(t),o.$parsers.push(t)),i.ngMinlength&&(d=y(i.ngMinlength),g=function(t){return or(o,"minlength",o.$isEmpty(t)||t.length>=d,t)},o.$parsers.push(g),o.$formatters.push(g)),i.ngMaxlength&&($=y(i.ngMaxlength),g=function(t){return or(o,"maxlength",o.$isEmpty(t)||t.length<=$,t)},o.$parsers.push(g),o.$formatters.push(g))}function sr(){return{require:["ngModel","^?form"],controller:gr,link:function(t,e,n,r){var i=r[0],o=r[1]||Kn;o.$addControl(i),t.$on("$destroy",function(){o.$removeControl(i)})}}}function ur(){return{require:"?ngModel",link:function(t,e,n,r){var i;r&&(n.required=!0,i=function(t){if(!n.required||!r.$isEmpty(t))return r.$setValidity("required",!0),t;r.$setValidity("required",!1)},r.$formatters.push(i),r.$parsers.unshift(i),n.$observe("required",function(){i(r.$viewValue)}))}}}function cr(){return{require:"ngModel",link:function(t,e,n,r){var i=/\/(.*)\//.exec(n.ngList),o=i&&new RegExp(i[1])||n.ngList||",";r.$parsers.push(function(t){if(!k(t)){var e=[];return t&&at(t.split(o),function(t){t&&e.push(ht(t))}),e}}),r.$formatters.push(function(t){return lt(t)?t.join(", "):it}),r.$isEmpty=function(t){return!t||!t.length}}}}function lr(){return{priority:100,compile:function(t,e){return mr.test(e.ngValue)?function(t,e,n){n.$set("value",t.$eval(n.ngValue))}:function(t,e,n){t.$watch(n.ngValue,function(t){n.$set("value",t)})}}}}var fr=["$browser","$sniffer",function(i,o){return{restrict:"E",require:"?ngModel",link:function(t,e,n,r){r&&(ir[w(n.type)]||ir.text)(t,e,n,r,o,i)}}}],hr="ng-valid",pr="ng-invalid",dr="ng-pristine",$r="ng-dirty",gr=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate",function(r,n,t,i,e,o){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$name=t.name;var a=e(t.ngModel),s=a.assign;if(!s)throw m("ngModel")("nonassign","Expression '{0}' is non-assignable. Element: {1}",t.ngModel,gt(i));this.$render=E,this.$isEmpty=function(t){return k(t)||""===t||null===t||t!=t};var u=i.inheritedData("$formController")||Kn,c=0,l=this.$error={};function f(t,e){e=e?"-"+vt(e,"-"):"",o.removeClass(i,(t?pr:hr)+e),o.addClass(i,(t?hr:pr)+e)}i.addClass(dr),f(!0),this.$setValidity=function(t,e){l[t]!==!e&&(e?(l[t]&&c--,c||(f(!0),this.$valid=!0,this.$invalid=!1)):(f(!1),this.$invalid=!0,this.$valid=!1,c++),l[t]=!e,f(e,t),u.$setValidity(t,e,this))},this.$setPristine=function(){this.$dirty=!1,this.$pristine=!0,o.removeClass(i,$r),o.addClass(i,dr)},this.$setViewValue=function(e){this.$viewValue=e,this.$pristine&&(this.$dirty=!0,this.$pristine=!1,o.removeClass(i,dr),o.addClass(i,$r),u.$setDirty()),at(this.$parsers,function(t){e=t(e)}),this.$modelValue!==e&&(this.$modelValue=e,s(r,e),at(this.$viewChangeListeners,function(t){try{t()}catch(t){n(t)}}))};var h=this;r.$watch(function(){var t=a(r);if(h.$modelValue!==t){var e=h.$formatters,n=e.length;for(h.$modelValue=t;n--;)t=e[n](t);h.$viewValue!==t&&(h.$viewValue=t,h.$render())}return t})}],vr=S({require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),mr=/^(true|false|\d+)$/,yr=Qn({compile:function(t){return t.addClass("ng-binding"),function(t,e,n){e.data("$binding",n.ngBind),t.$watch(n.ngBind,function(t){e.text(t==it?"":t)})}}}),wr=["$interpolate",function(i){return function(t,e,n){var r=i(e.attr(n.$attr.ngBindTemplate));e.addClass("ng-binding").data("$binding",r),n.$observe("ngBindTemplate",function(t){e.text(t)})}}],br=["$sce","$parse",function(i,o){return function(t,e,n){e.addClass("ng-binding").data("$binding",n.ngBindHtml);var r=o(n.ngBindHtml);t.$watch(function(){return(r(t)||"").toString()},function(){e.html(i.getTrustedHtml(r(t))||"")})}}];function xr(r,p){return r="ngClass"+r,["$animate",function(l){return{restrict:"AC",link:function(o,a,n){var s;function u(t){t=c(t,1);n.$addClass(t)}function c(t,e){var n=a.data("$classCounts")||{},r=[];return at(t,function(t){(0<e||n[t])&&(n[t]=(n[t]||0)+e,n[t]===+(0<e)&&r.push(t))}),a.data("$classCounts",n),r.join(" ")}function e(t){var e,n,r,i;!0!==p&&o.$index%2!==p||(e=h(t||[]),s?dt(t,s)||(i=h(s),i=f(r=e,n=i),r=c(r=f(n,r),-1),0===(i=c(i,1)).length?l.removeClass(a,r):0===r.length?l.addClass(a,i):l.setClass(a,i,r)):u(e)),s=pt(t)}o.$watch(n[r],e,!0),n.$observe("class",function(t){e(o.$eval(n[r]))}),"ngClass"!==r&&o.$watch("$index",function(t,e){t&=1;t!=(1&e)&&(e=h(o.$eval(n[r])),(t===p?u:function(t){t=c(t,-1);n.$removeClass(t)})(e))})}};function f(t,e){var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i==e[o])continue t;n.push(i)}return n}function h(t){if(lt(t))return t;if(ct(t))return t.split(" ");if(ut(t)){var n=[];return at(t,function(t,e){t&&(n=n.concat(e.split(" ")))}),n}return t}}]}var Sr=xr("",!0),Cr=xr("Odd",0),Er=xr("Even",1),kr=Qn({compile:function(t,e){e.$set("ngCloak",it),t.removeClass("ng-cloak")}}),Ar=[function(){return{scope:!0,controller:"@",priority:500}}],Tr={};at("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(i){var o=be("ng-"+i);Tr[o]=["$parse",function(r){return{compile:function(t,e){var n=r(e[o]);return function(e,t){t.on(w(i),function(t){e.$apply(function(){n(e,{$event:t})})})}}}}]});var Or=["$animate",function(u){return{transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(e,n,r,t,i){var o,a,s;e.$watch(r.ngIf,function(t){H(t)?a||(a=e.$new(),i(a,function(t){t[t.length++]=rt.createComment(" end ngIf: "+r.ngIf+" "),o={clone:t},u.enter(t,n.parent(),n)})):(s&&(s.remove(),s=null),a&&(a.$destroy(),a=null),o&&(s=Z(o.clone),u.leave(s,function(){s=null}),o=null))})}}}],Mr=["$http","$templateCache","$anchorScroll","$animate","$sce",function(d,$,g,v,r){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:l.noop,compile:function(t,e){var n=e.ngInclude||e.src,h=e.onload||"",p=e.autoscroll;return function(i,o,t,a,s){function u(){e&&(e.remove(),e=null),c&&(c.$destroy(),c=null),l&&(v.leave(l,function(){e=null}),e=l,l=null)}var c,e,l,f=0;i.$watch(r.parseAsResourceUrl(n),function(t){function n(){!I(p)||p&&!i.$eval(p)||g()}var r=++f;t?(d.get(t,{cache:$}).success(function(t){var e;r===f&&(e=i.$new(),a.template=t,t=s(e,function(t){u(),v.enter(t,null,o,n)}),l=t,(c=e).$emit("$includeContentLoaded"),i.$eval(h))}).error(function(){r===f&&u()}),i.$emit("$includeContentRequested")):(u(),a.template=null)})}}}}],Pr=["$compile",function(i){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(t,e,n,r){e.html(r.template),i(e.contents())(t)}}}],jr=Qn({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),Nr=Qn({terminal:!0,priority:1e3}),Dr=["$locale","$interpolate",function(f,h){var p=/{}/g;return{restrict:"EA",link:function(e,n,r){var i=r.count,t=r.$attr.when&&n.attr(r.$attr.when),o=r.offset||0,a=e.$eval(t)||{},s={},u=h.startSymbol(),c=h.endSymbol(),l=/^when(Minus)?(.+)$/;at(r,function(t,e){l.test(e)&&(a[w(e.replace("when","").replace("Minus","-"))]=n.attr(r.$attr[e]))}),at(a,function(t,e){s[e]=h(t.replace(p,u+i+"-"+o+c))}),e.$watch(function(){var t=parseFloat(e.$eval(i));return isNaN(t)?"":(t in a||(t=f.pluralCat(t-o)),s[t](e,n,!0))},function(t){n.text(t)})}}}],Rr=["$parse","$animate",function(s,k){var A="$$NG_REMOVED",T=m("ngRepeat");return{transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,link:function(g,v,t,e,m){var r,y,w,b,n,i,x,S,C=t.ngRepeat,o=C.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),a={$id:ee};if(!o)throw T("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",C);if(n=o[1],i=o[2],(t=o[3])?(r=s(t),y=function(t,e,n){return S&&(a[S]=t),a[x]=e,a.$index=n,r(g,a)}):(w=function(t,e){return ee(e)},b=function(t){return t}),!(o=n.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/)))throw T("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",n);x=o[3]||o[1],S=o[2];var E={};g.$watchCollection(i,function(t){var e,n,r,i,o,a,s,u,c,l,f,h,p=v[0],d={},$=[];if(M(t))l=t,c=y||w;else{for(a in c=y||b,l=[],t)t.hasOwnProperty(a)&&"$"!=a.charAt(0)&&l.push(a);l.sort()}for(i=l.length,n=$.length=l.length,e=0;e<n;e++)if(K(u=c(a=t===l?e:l[e],s=t[a],e),"`track by` id"),E.hasOwnProperty(u))f=E[u],delete E[u],d[u]=f,$[e]=f;else{if(d.hasOwnProperty(u))throw at($,function(t){t&&t.scope&&(E[t.id]=t)}),T("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}",C,u);$[e]={id:u},d[u]=!1}for(a in E)E.hasOwnProperty(a)&&(h=Z((f=E[a]).clone),k.leave(h),at(h,function(t){t[A]=!0}),f.scope.$destroy());for(e=0,n=l.length;e<n;e++){if(s=t[a=t===l?e:l[e]],f=$[e],$[e-1]&&(p=O($[e-1])),f.scope){for(o=f.scope,r=p;r=r.nextSibling,r&&r[A];);f.clone[0]!=r&&k.move(Z(f.clone),null,ot(p)),p=O(f)}else o=g.$new();o[x]=s,S&&(o[S]=a),o.$index=e,o.$first=0===e,o.$last=e===i-1,o.$middle=!(o.$first||o.$last),o.$odd=!(o.$even=0==(1&e)),f.scope||m(o,function(t){t[t.length++]=rt.createComment(" end ngRepeat: "+C+" "),k.enter(t,null,ot(p)),p=t,f.scope=o,f.clone=t,d[f.id]=f})}E=d})}};function O(t){return t.clone[t.clone.length-1]}}],Ur=["$animate",function(r){return function(t,e,n){t.$watch(n.ngShow,function(t){r[H(t)?"removeClass":"addClass"](e,"ng-hide")})}}],qr=["$animate",function(r){return function(t,e,n){t.$watch(n.ngHide,function(t){r[H(t)?"addClass":"removeClass"](e,"ng-hide")})}}],Vr=Qn(function(t,n,e){t.$watch(e.ngStyle,function(t,e){e&&t!==e&&at(e,function(t,e){n.css(e,"")}),t&&n.css(t)},!0)}),Ir=["$animate",function(f){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(i,t,o,a){var s,e=o.ngSwitch||o.on,u=[],c=[],l=[];i.$watch(e,function(t){for(var e=0,n=c.length;e<n;++e)c[e].remove();for(c.length=0,e=0,n=l.length;e<n;++e){var r=u[e];l[e].$destroy(),c[e]=r,f.leave(r,function(){c.splice(e,1)})}u.length=0,l.length=0,(s=a.cases["!"+t]||a.cases["?"])&&(i.$eval(o.change),at(s,function(n){var t=i.$new();l.push(t),n.transclude(t,function(t){var e=n.element;u.push(t),f.enter(t,e.parent(),e)})}))})}}}],Fr=Qn({transclude:"element",priority:800,require:"^ngSwitch",link:function(t,e,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:e})}}),_r=Qn({transclude:"element",priority:800,require:"^ngSwitch",link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),Lr=Qn({link:function(t,e,n,r,i){if(!i)throw m("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",gt(e));i(function(t){e.empty(),e.append(t)})}}),Hr=["$templateCache",function(n){return{restrict:"E",terminal:!0,compile:function(t,e){"text/ng-template"==e.type&&(e=e.id,t=t[0].text,n.put(e,t))}}}],Br=m("ngOptions"),zr=S({terminal:!0}),Wr=["$compile","$parse",function(w,b){var x=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,s={$setViewValue:E};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(e,t,n){var r,i=this,o={},a=s;i.databound=n.ngModel,i.init=function(t,e,n){a=t,r=n},i.addOption=function(t){K(t,'"option value"'),o[t]=!0,a.$viewValue==t&&(e.val(t),r.parent()&&r.remove())},i.removeOption=function(t){this.hasOption(t)&&(delete o[t],a.$viewValue==t&&this.renderUnknownOption(t))},i.renderUnknownOption=function(t){t="? "+ee(t)+" ?";r.val(t),e.prepend(r),e.val(t),r.prop("selected",!0)},i.hasOption=function(t){return o.hasOwnProperty(t)},t.$on("$destroy",function(){i.renderUnknownOption=E})}],link:function(t,e,n,r){if(r[1]){for(var i,o,a,s,u,c,l,f,h,p=r[0],d=r[1],D=n.multiple,$=n.ngOptions,R=!1,U=ot(rt.createElement("option")),q=ot(rt.createElement("optgroup")),g=U.clone(),v=0,m=e.children(),y=m.length;v<y;v++)if(""===m[v].value){i=R=m.eq(v);break}p.init(d,R,g),D&&(d.$isEmpty=function(t){return!t||0===t.length}),$?function(S,C,E){var t;if(!(t=$.match(x)))throw Br("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",$,gt(C));var k=b(t[2]||t[1]),A=t[4]||t[6],T=t[5],O=b(t[3]||""),M=b(t[2]?t[1]:A),P=b(t[7]),j=t[8]?b(t[8]):null,N=[[{element:C,label:""}]];R&&(w(R)(S),R.removeClass("ng-scope"),R.remove());function e(){var t,e,n,r,i,o,a,s,u,c,l,f,h,p,d,$={"":[]},g=[""],v=E.$modelValue,m=P(S)||[],y=T?V(m):m,w={},b=!1;if(D)if(j&&lt(v)){b=new ne([]);for(var x=0;x<v.length;x++)w[A]=v[x],b.put(j(S,w),v[x])}else b=new ne(v);for(l=0;l<(u=y.length);l++){if(a=l,T){if("$"===(a=y[l]).charAt(0))continue;w[T]=a}w[A]=m[a],(e=$[t=O(S,w)||""])||(e=$[t]=[],g.push(t)),D?d=I(b.remove((j||M)(S,w))):(d=j?((p={})[A]=v,j(S,p)===j(S,w)):v===M(S,w),b=b||d),p=I(p=k(S,w))?p:"",e.push({id:j?j(S,w):T?y[l]:l,label:p,selected:d})}for(D||(R||null===v?$[""].unshift({id:"",label:"",selected:!b}):b||$[""].unshift({id:"?",label:"",selected:!0})),c=0,s=g.length;c<s;c++){for(e=$[t=g[c]],N.length<=c?(i=[r={element:q.clone().attr("label",t),label:e.label}],N.push(i),C.append(r.element)):(r=(i=N[c])[0]).label!=t&&r.element.attr("label",r.label=t),f=null,l=0,u=e.length;l<u;l++)n=e[l],(o=i[l+1])?(f=o.element,o.label!==n.label&&f.text(o.label=n.label),o.id!==n.id&&f.val(o.id=n.id),o.selected!==n.selected&&f.prop("selected",o.selected=n.selected)):(""===n.id&&R?h=R:(h=U.clone()).val(n.id).attr("selected",n.selected).text(n.label),i.push(o={element:h,label:n.label,id:n.id,selected:n.selected}),f?f.after(h):r.element.append(h),f=h);for(l++;i.length>l;)i.pop().element.remove()}for(;N.length>c;)N.pop()[0].element.remove()}C.empty(),C.on("change",function(){S.$apply(function(){var t,e,n,r,i,o,a,s,u,c=P(S)||[],l={};if(D){for(n=[],o=0,s=N.length;o<s;o++)for(i=1,a=(t=N[o]).length;i<a;i++)if((r=t[i].element)[0].selected){if(e=r.val(),T&&(l[T]=e),j)for(u=0;u<c.length&&(l[A]=c[u],j(S,l)!=e);u++);else l[A]=c[e];n.push(M(S,l))}}else{if("?"==(e=C.val()))n=it;else if(""===e)n=null;else if(j){for(u=0;u<c.length;u++)if(l[A]=c[u],j(S,l)==e){n=M(S,l);break}}else l[A]=c[e],T&&(l[T]=e),n=M(S,l);1<N[0].length&&N[0][1].id!==e&&(N[0][1].selected=!1)}E.$setViewValue(n)})}),E.$render=e,S.$watch(e)}(t,e,d):D?(c=t,l=e,(f=d).$render=function(){var e=new ne(f.$viewValue);at(l.find("option"),function(t){t.selected=I(e.get(t.value))})},c.$watch(function(){dt(h,f.$viewValue)||(h=pt(f.$viewValue),f.$render())}),l.on("change",function(){c.$apply(function(){var e=[];at(l.find("option"),function(t){t.selected&&e.push(t.value)}),f.$setViewValue(e)})})):(o=t,a=e,u=p,(s=d).$render=function(){var t=s.$viewValue;u.hasOption(t)?(g.parent()&&g.remove(),a.val(t),""===t&&i.prop("selected",!0)):k(t)&&i?a.val(""):u.renderUnknownOption(t)},a.on("change",function(){o.$apply(function(){g.parent()&&g.remove(),s.$setViewValue(a.val())})}))}}}}],Xr=["$interpolate",function(n){var s={addOption:E,removeOption:E};return{restrict:"E",priority:100,compile:function(t,e){var a;return k(e.value)&&((a=n(t.text(),!0))||e.$set("value",t.text())),function(t,e,n){var r="$selectController",i=e.parent(),o=i.data(r)||i.parent().data(r);o&&o.databound?e.prop("selected",!1):o=s,a?t.$watch(a,function(t,e){n.$set("value",t),t!==e&&o.removeOption(e),o.addOption(t)}):o.addOption(n.value),e.on("$destroy",function(){o.removeOption(n.value)})}}}}],Qr=S({restrict:"E",terminal:!0});$.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):((d=$.jQuery)&&d.fn.on?(st((ot=d).fn,{scope:Qt.scope,isolateScope:Qt.isolateScope,controller:Qt.controller,injector:Qt.injector,inheritedData:Qt.inheritedData}),kt("remove",!0,!0,!1),kt("empty",!1,!1,!1),kt("html",!1,!1,!0)):ot=Dt,l.element=ot,function(t){function e(t,e,n){return t[e]||(t[e]=n())}var u,n;st(t,{bootstrap:J,copy:R,extend:st,equals:dt,element:ot,forEach:at,injector:ce,noop:E,bind:F,toJson:_,fromJson:L,identity:b,isUndefined:k,isDefined:I,isString:ct,isFunction:ft,isObject:ut,isNumber:h,isElement:o,isArray:lt,version:tt,isDate:C,lowercase:w,uppercase:c,callbacks:{counter:0},$$minErr:m,$$csp:U}),u=m("$injector"),n=m("ng"),(t=e(t=$,"angular",Object)).$$minErr=t.$$minErr||m,p=e(t,"module",function(){var t={};return function(o,a,s){return function(t,e){if("hasOwnProperty"===t)throw n("badname","hasOwnProperty is not a valid {0} name",e)}(o,"module"),a&&t.hasOwnProperty(o)&&(t[o]=null),e(t,o,function(){if(!a)throw u("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",o);var r=[],e=[],t=n("$injector","invoke"),i={_invokeQueue:r,_runBlocks:e,requires:a,name:o,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:n("$provide","value"),constant:n("$provide","constant","unshift"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),config:t,run:function(t){return e.push(t),this}};return s&&t(s),i;function n(t,e,n){return function(){return r[n||"push"]([t,e,arguments]),i}}})}});try{p("ngLocale")}catch(t){p("ngLocale",[]).provider("$locale",Ue)}p("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:vn}),t.provider("$compile",ye).directive({a:Jn,input:fr,textarea:fr,form:Zn,script:Hr,select:Wr,style:Qr,option:Xr,ngBind:yr,ngBindHtml:br,ngBindTemplate:wr,ngClass:Sr,ngClassEven:Er,ngClassOdd:Cr,ngCloak:kr,ngController:Ar,ngForm:tr,ngHide:qr,ngIf:Or,ngInclude:Mr,ngInit:jr,ngNonBindable:Nr,ngPluralize:Dr,ngRepeat:Rr,ngShow:Ur,ngStyle:Vr,ngSwitch:Ir,ngSwitchWhen:Fr,ngSwitchDefault:_r,ngOptions:zr,ngTransclude:Lr,ngModel:sr,ngList:cr,ngChange:vr,required:ur,ngRequired:ur,ngValue:lr}).directive({ngInclude:Pr}).directive(Gn).directive(Tr),t.provider({$anchorScroll:le,$animate:he,$browser:$e,$cacheFactory:ge,$controller:Se,$document:Ce,$exceptionHandler:Ee,$filter:Mn,$interpolate:De,$interval:Re,$http:Me,$httpBackend:je,$location:Ke,$log:Ye,$parse:pn,$rootScope:gn,$q:dn,$sce:xn,$sceDelegate:bn,$sniffer:Sn,$templateCache:ve,$timeout:Cn,$window:On,$$rAF:$n,$$asyncCallback:pe})}])}(l),ot(rt).ready(function(){function e(t){t&&o.push(t)}var n,t,r,i,o,a,s;t=J,o=[n=rt],s=/\sng[:\-]app(:\s*([\w\d_]+);?)?\s/,at(a=["ng:app","ng-app","x-ng-app","data-ng-app"],function(t){a[t]=!0,e(rt.getElementById(t)),t=t.replace(":","\\:"),n.querySelectorAll&&(at(n.querySelectorAll("."+t),e),at(n.querySelectorAll("."+t+"\\:"),e),at(n.querySelectorAll("["+t+"]"),e))}),at(o,function(e){var t;r||(t=" "+e.className+" ",(t=s.exec(t))?(r=e,i=(t[2]||"").replace(/\s+/g,",")):at(e.attributes,function(t){!r&&a[t.name]&&(r=e,i=t.value)}))}),r&&t(r,i?[i]:[])}))}(window,document),window.angular.$$csp()||window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}</style>'),angular.module("app").controller("ApplicationCtrl",["$scope","$window","$location",function(n,t,e){n.$on("login",function(t,e){n.currentUser=e}),n.$on("logout",function(){n.currentUser=void 0}),n.checkToken=function(){t.sessionStorage.jwt&&""!=t.sessionStorage.jwt?""!=t.sessionStorage.jwt&&(n.currentUser="user"):e.path("/gate")}}]),angular.module("app").service("blogSvc",["$http",function(e){this.createBlog=function(t){return e.post("/newBlog",t)},this.getBlogs=function(){return e.get("/getBlogs")},this.deleteBlog=function(t){return e.delete("/deleteBlog/"+t)},this.updateBlog=function(t){return e.post("/updateBlog/"+t.id+"/update",t)},this.getBlog=function(t){return e.get("/getBlog/"+t)}}]),angular.module("app").controller("dashboardCtrl",["$http","$scope","blogSvc","$interval","$routeParams",function(t,r,i,e,n){var o=null;r.getBlogs=function(){i.getBlogs().success(function(t){r.blogs=t})},r.getBlog=function(t){t=n.id,i.getBlog(t).success(function(t){r.blog=t})},r.changeLightbox=function(t,e,n){1==t?("send"==e?(r.title="",r.content="",r.action="send",r.message="blog saved"):"edit"==e&&i.getBlog(n).success(function(t){r.title=t.title,r.content=t.content,o=n,r.action="edit",r.message="edition successful"}),r.lightbox={visibility:"visible"}):0==t&&(r.lightbox={visibility:"hidden"})};function a(t){r.flashMessage=t,s.removeClass("notVisible"),s.addClass("show"),e(function(){s.removeClass("show"),s.addClass("notVisible")},1e3,1)}var s=angular.element(document.getElementById("flashBox"));r.form=function(t,e){"edit"==t?u(o,e):"send"==t&&c(e)};var u=function(t,e){r.title.length<=18?(i.updateBlog({id:t,title:r.title,content:r.content}),r.changeLightbox(!1),r.title="",r.content="",a(e),i.getBlogs().success(function(t){r.blogs=t})):(e=r.title.length-18,a("delete "+e+" characters from the title"))},c=function(t){r.lightbox={visibility:"hidden"},i.createBlog({title:r.title,content:r.content}).success(function(){r.title="",r.content="",a(t),i.getBlogs().success(function(t){r.blogs=t})})};r.delete=function(t,e){i.deleteBlog(t).success(function(){a(e),i.getBlogs().success(function(t){r.blogs=t})})}}]),angular.module("app").controller("loginCtrl",["$scope","$location","userSvc",function(n,r,i){n.login=function(t,e){i.login(t,e).then(function(t){n.$emit("login",t.data),r.path("/")})},n.submitClicked=function(){}}]),angular.module("app").controller("menuCtrl",["$scope","$location","userSvc",function(e,t,n){e.getUsername=function(){n.getUser().then(function(t){e.username=t.data.name+" "+t.data.surname})},e.logout=function(){n.logOut(),e.$emit("logout"),t.path("/#/gate"),console.log("logged out")}}]),angular.module("app").controller("registerCtrl",["$scope","$location","userSvc",function(t,i,o){t.register=function(t,e,n,r){o.register({name:t,surname:e,email:n,password:r}).then(function(t){201==t.status&&(console.log("registered successfully"),i.path("/"))})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"dashboardCtrl",templateUrl:"/partials/dashboard.html"}).when("/show/:id",{controller:"dashboardCtrl",templateUrl:"/partials/show.html"}).when("/register",{controller:"registerCtrl",templateUrl:"/partials/register.html"}).when("/login",{controller:"loginCtrl",templateUrl:"/partials/login.html"}).when("/gate",{controller:"",templateUrl:"/layouts/gate.html"})}]),angular.module("app").controller("showCtrl",["$scope","$interval",function(t,e){t.showUpdate=function(){e(function(){location.reload()},2e3,1)},t.top=function(){var t=angular.element(document.getElementById("btnTop"));window.scrollTo({top:0,left:0,behavior:"smooth"}),t.removeClass("show"),t.addClass("notVisible")},window.onscroll=function(){var t=angular.element(document.getElementById("btnTop")),e=angular.element(document.documentElement.scrollTop)[0];200<e?(t.removeClass("notVisible"),t.addClass("show")):e<200&&(t.removeClass("show"),t.addClass("notVisible"))}}]),angular.module("app").service("userSvc",["$http","$window","$location",function(n,r,t){var i=this;i.register=function(t){return n.post("/user",t).then(function(){i.login({email:t.email,password:t.password})})},i.login=function(t,e){return n.post("/session",{email:t,password:e}).then(function(t){return r.sessionStorage.jwt=t.data,n.defaults.headers.common["X-Auth"]=r.sessionStorage.jwt,i.getUser()})},i.getUser=function(){return n.get("/user")},i.setToken=function(){return r.sessionStorage.jwt&&(n.defaults.headers.common["X-Auth"]=r.sessionStorage.jwt),i.getUser()},i.logOut=function(){r.sessionStorage.jwt="",n.defaults.headers.common["X-Auth"]=void 0}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
